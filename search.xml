<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>异步数据同步工具-FlinkX</title>
      <link href="/2021/07/14/%E5%BC%82%E6%AD%A5%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E5%B7%A5%E5%85%B7-FlinkX/"/>
      <url>/2021/07/14/%E5%BC%82%E6%AD%A5%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E5%B7%A5%E5%85%B7-FlinkX/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>FlinkX是一个基于Flink的批流统一的数据同步工具，既可以采集静态的数据，比如MySQL，HDFS等，也可以采集实时变化的数据，比如MySQL binlog，Kafka等。FlinkX目前包含下面这些特性：</p><ul><li>大部分插件支持并发读写数据，可以大幅度提高读写速度；</li><li>部分插件支持失败恢复的功能，可以从失败的位置恢复任务，节约运行时间；<a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/restore.md">失败恢复</a></li><li>关系数据库的Reader插件支持间隔轮询功能，可以持续不断的采集变化的数据；<a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/rdbreader.md">间隔轮询</a></li><li>部分数据库支持开启Kerberos安全认证；<a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/kerberos.md">Kerberos</a></li><li>可以限制reader的读取速度，降低对业务数据库的影响；</li><li>可以记录writer插件写数据时产生的脏数据；</li><li>可以限制脏数据的最大数量；</li><li>支持多种运行模式；</li></ul><p>FlinkX目前支持下面这些数据库：</p><table><thead><tr><th></th><th>Database Type</th><th>Reader</th><th>Writer</th></tr></thead><tbody><tr><td>Batch Synchronization</td><td>MySQL</td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/rdbreader.md">doc</a></td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/rdbwriter.md">doc</a></td></tr><tr><td></td><td>Oracle</td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/rdbreader.md">doc</a></td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/rdbwriter.md">doc</a></td></tr><tr><td></td><td>SqlServer</td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/rdbreader.md">doc</a></td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/rdbwriter.md">doc</a></td></tr><tr><td></td><td>PostgreSQL</td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/rdbreader.md">doc</a></td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/rdbwriter.md">doc</a></td></tr><tr><td></td><td>DB2</td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/rdbreader.md">doc</a></td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/rdbwriter.md">doc</a></td></tr><tr><td></td><td>GBase</td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/rdbreader.md">doc</a></td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/rdbwriter.md">doc</a></td></tr><tr><td></td><td>ClickHouse</td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/rdbreader.md">doc</a></td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/rdbwriter.md">doc</a></td></tr><tr><td></td><td>PolarDB</td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/rdbreader.md">doc</a></td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/rdbwriter.md">doc</a></td></tr><tr><td></td><td>SAP Hana</td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/rdbreader.md">doc</a></td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/rdbwriter.md">doc</a></td></tr><tr><td></td><td>Teradata</td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/rdbreader.md">doc</a></td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/rdbwriter.md">doc</a></td></tr><tr><td></td><td>Phoenix</td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/rdbreader.md">doc</a></td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/rdbwriter.md">doc</a></td></tr><tr><td></td><td>达梦</td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/rdbreader.md">doc</a></td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/rdbwriter.md">doc</a></td></tr><tr><td></td><td>Cassandra</td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/cassandrareader.md">doc</a></td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/cassandrawriter.md">doc</a></td></tr><tr><td></td><td>ODPS</td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/odpsreader.md">doc</a></td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/odpswriter.md">doc</a></td></tr><tr><td></td><td>HBase</td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/hbasereader.md">doc</a></td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/hbasewriter.md">doc</a></td></tr><tr><td></td><td>MongoDB</td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/mongodbreader.md">doc</a></td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/mongodbwriter.md">doc</a></td></tr><tr><td></td><td>Kudu</td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/kudureader.md">doc</a></td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/kuduwriter.md">doc</a></td></tr><tr><td></td><td>ElasticSearch</td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/esreader.md">doc</a></td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/eswriter.md">doc</a></td></tr><tr><td></td><td>FTP</td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/ftpreader.md">doc</a></td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/ftpwriter.md">doc</a></td></tr><tr><td></td><td>HDFS</td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/hdfsreader.md">doc</a></td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/hdfswriter.md">doc</a></td></tr><tr><td></td><td>Carbondata</td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/carbondatareader.md">doc</a></td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/carbondatawriter.md">doc</a></td></tr><tr><td></td><td>Redis</td><td></td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/rediswriter.md">doc</a></td></tr><tr><td></td><td>Hive</td><td></td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/hivewriter.md">doc</a></td></tr><tr><td>Stream Synchronization</td><td>Kafka</td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/kafkareader.md">doc</a></td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/kafkawriter.md">doc</a></td></tr><tr><td></td><td>EMQX</td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/emqxreader.md">doc</a></td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/emqxwriter.md">doc</a></td></tr><tr><td></td><td>MySQL Binlog</td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/binlog.md">doc</a></td><td></td></tr><tr><td></td><td>MongoDB Oplog</td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/mongodb_oplog.md">doc</a></td><td></td></tr><tr><td></td><td>PostgreSQL WAL</td><td><a href="https://github.com/oceanos/flinkx/blob/1.8_release/docs/pgwalreader.md">doc</a></td><td></td></tr></tbody></table><p>详细见：</p><p>​    <a href="https://github.com/DTStack/flinkx">https://github.com/DTStack/flinkx</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FlinkX </tag>
            
            <tag> 数据同步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经典语录(二)</title>
      <link href="/2021/06/24/%E7%BB%8F%E5%85%B8%E8%AF%AD%E5%BD%95-%E4%BA%8C/"/>
      <url>/2021/06/24/%E7%BB%8F%E5%85%B8%E8%AF%AD%E5%BD%95-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">“或许命运安排你们很多年前便是单独的世界，不需要有人站在柴门外轻敲，</span><br><span class="line">也不需要有人在院外冬树下呼喊打扰，但我不相信命运。”</span><br><span class="line">“荒原一路同行，我要益极多，长安冬日并肩而游，很是欢喜。”</span><br><span class="line">“雪夜红墙，你曾说过喜欢，我曾说过喜欢是不够的，而且最后证明确实是不够的，</span><br><span class="line">但至少你曾说过喜欢，我很喜欢。”</span><br><span class="line">“长安城与大河国相距甚远，但不及荒原路途遥远，若真想来，若真想去，</span><br><span class="line">也便极近，日后你来看我，或我来看你，或他山云雾之中再见，都是人生欢愉事。”</span><br><span class="line">“经历诸多事，我眼中河山已有新意，重逢那日，所书所写定然较今日更加壮阔，</span><br><span class="line">望你也多加努力，莫要令我失望。”或许还有希冀！</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 经典语录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经典语录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>炎黄BPM学习(三)-AT开发</title>
      <link href="/2021/06/17/%E7%82%8E%E9%BB%84BPM%E5%AD%A6%E4%B9%A0-%E4%B8%89-AT%E5%BC%80%E5%8F%91/"/>
      <url>/2021/06/17/%E7%82%8E%E9%BB%84BPM%E5%AD%A6%E4%B9%A0-%E4%B8%89-AT%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>@公式(又称为@命令/AT公式)是一个预先定义，服务器端解析执行的函数公式（例如获得当前服务器日期，可使用<code>@date</code>）。</p><h3 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h3><ol><li>继承<code>AbstExpression</code>抽象类，实现公式的处理逻辑</li><li>用<code>AtFormulaPluginProfile</code>描述这个插件，注册到该应用的<code>PluginListener</code>类。</li><li>场景模拟，调试</li></ol><h3 id="注册语法"><a href="#注册语法" class="headerlink" title="注册语法"></a>注册语法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注册AT公式</span></span><br><span class="line">list.add(<span class="keyword">new</span> AtFormulaPluginProfile(groupName, syntax,</span><br><span class="line">clazz, title, desc));</span><br></pre></td></tr></table></figure><ul><li><code>groupName</code>-分类，首先检查当前AT公式库的分类是否符合你的公式，如果不符合可以给定一个合理的新分类</li><li><code>syntax</code>-语法，例如<code>@hour(datetime)</code>。如某参数必填可加*前缀，例如<code>@dateAdd(*datepart,*number,*date)</code></li><li><code>clazz</code>-实现类路径，如<code>com.actionsoft.apps.poc.plugin.at.MyLenExpression</code></li><li><code>title</code>-简要说明，简明扼要</li><li><code>desc</code>-详细说明</li></ul><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><h4 id="继承AbstExpression抽象类。"><a href="#继承AbstExpression抽象类。" class="headerlink" title="继承AbstExpression抽象类。"></a>继承<code>AbstExpression</code>抽象类。</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyIntervalEndTime</span> <span class="keyword">extends</span> <span class="title">AbstExpression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String DATE_FORMAT = <span class="string">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyIntervalEndTime</span><span class="params">(ExpressionContext atContext, String expressionValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(atContext, expressionValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">(String expression)</span> <span class="keyword">throws</span> AWSExpressionException </span>&#123;</span><br><span class="line">        <span class="comment">// 取第1个参数 开始时间</span></span><br><span class="line">        String startDateStr = getParameter(expression, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(startDateStr)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取月份</span></span><br><span class="line">        String monthStr = getParameter(expression, <span class="number">2</span>);</span><br><span class="line">        Date startDate = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            startDate = DateUtils.parseDate(startDateStr, DATE_FORMAT);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            LogAPI.getLogger(<span class="keyword">this</span>.getClass()).error(<span class="string">&quot;时间转换异常&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//计算结束日期</span></span><br><span class="line">        <span class="keyword">assert</span> startDate != <span class="keyword">null</span>;</span><br><span class="line">        Date endDate = DateUtils.addMonths(startDate, Integer.parseInt(monthStr));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> DateFormatUtils.format(endDate, DATE_FORMAT);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注册到该应用的PluginListener类"><a href="#注册到该应用的PluginListener类" class="headerlink" title="注册到该应用的PluginListener类"></a>注册到该应用的<code>PluginListener</code>类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Plugins</span> <span class="keyword">implements</span> <span class="title">PluginListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AWSPluginProfile&gt; <span class="title">register</span><span class="params">(AppContext appContext)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 存放本应用的全部插件扩展点描述</span></span><br><span class="line">        List&lt;AWSPluginProfile&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 注册AT公式</span></span><br><span class="line">        list.add(<span class="keyword">new</span> AtFormulaPluginProfile(<span class="string">&quot;合同台账&quot;</span>, <span class="string">&quot;@MyIntervalEndTime(*startTime,*month)&quot;</span>, MyIntervalEndTime.class.getName(), <span class="string">&quot;合同结束日期&quot;</span>, <span class="string">&quot;根据合同的开始日期和月份计算合同的结束日期&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h4><pre><code> 注意：在AWS CONSOLE的`应用管理 &gt; 应用开发 &gt; 配置应用`或AWS Developer中配置该App的`扩展插件`选项为`com.actionsoft.apps.poc.plugin.Plugins`</code></pre>]]></content>
      
      
      <categories>
          
          <category> BPM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 炎黄BPM </tag>
            
            <tag> BPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>炎黄BPM学习(二)</title>
      <link href="/2021/06/11/%E7%82%8E%E9%BB%84BPm%E5%AD%A6%E4%B9%A0-%E4%BA%8C/"/>
      <url>/2021/06/11/%E7%82%8E%E9%BB%84BPm%E5%AD%A6%E4%B9%A0-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="BPM定时器"><a href="#BPM定时器" class="headerlink" title="BPM定时器"></a>BPM定时器</h3><h4 id="支持的类型"><a href="#支持的类型" class="headerlink" title="支持的类型"></a>支持的类型</h4><ul><li>Job，常规定时任务</li><li>SOAP Job，定时访问SOAP Web服务</li><li>HTTP Job，定时访问HTTP(s) Web服务</li><li>SQL Job，定时执行数据库SQL</li></ul><h4 id="创建常规job"><a href="#创建常规job" class="headerlink" title="创建常规job"></a>创建常规job</h4><p>在指定的触发条件执行一次或周期重复执行指定的Java程序。</p><h5 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h5><h6 id="实现IJob接口"><a href="#实现IJob接口" class="headerlink" title="实现IJob接口"></a>实现IJob接口</h6><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.job;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionContext;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.schedule.IJob;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.sdk.local.SDK;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloJob</span> <span class="keyword">implements</span> <span class="title">IJob</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        <span class="comment">// 读管理员配置的扩展参数串，支持简单的@公式</span></span><br><span class="line">        String param = SDK.getJobAPI().getJobParameter(jobExecutionContext);</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello AWS PaaS Job Demo! Param = &quot;</span> + param);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SDK.getJobAPI().getJobParameter 读取维护的扩展参数</li><li>SDK.getJobAPI().getJobModel 读取Job配置模型</li></ul><p>任务的配置信息将创建在选择的应用。同时，您编译的Java代码必须部署在该应用下，即%AWS-HOME%/apps/install/%your appId%/lib</p><h6 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h6><ol><li>登录您的AWS PaaS实例控制台</li><li>访问“调度服务”页面</li><li>点击“新建”按钮</li><li>输入Java程序所在的应用，并选择“Job 常规定时任务”</li><li>点击“确定”按钮，完成新建</li></ol><h6 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h6><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">任务名称</td><td align="left">易于运维人员了解的Job名，如<code>异常交易监控</code></td></tr><tr><td align="left">任务执行类</td><td align="left">Java类路径，请<a href="https://docs.awspaas.com/reference-guide/aws-paas-job-reference-guide/job_dev/sample_job.html">移步到这里</a></td></tr><tr><td align="left">顺序执行</td><td align="left">选中后，上下文参数被持久化，Job不会并行执行。等同于<a href="https://docs.awspaas.com/reference-guide/aws-paas-job-reference-guide/job_dev/concurrently_job.html">互斥Job</a></td></tr><tr><td align="left">自定义参数</td><td align="left">自定义的串（可选），开发者可以在程序中读取该值，支持基本的@公式</td></tr><tr><td align="left">触发规则</td><td align="left">执行该Job的循环策略</td></tr><tr><td align="left">通知规则</td><td align="left">执行该Job的通知规则，支持手机短信、邮件通知、企业微信、钉钉、飞书通知，详见<a href="https://docs.awspaas.com/apps/com.actionsoft.apps.addons.mail/appendix/scenes.html#a">邮件通知-系统通知</a></td></tr></tbody></table><h4 id="创建SOAP-Job"><a href="#创建SOAP-Job" class="headerlink" title="创建SOAP Job"></a>创建SOAP Job</h4><p>在指定的触发条件执行一次或周期重复执行指定的SOAP服务，该服务指向一个AWS CC的SOAP适配器。</p><h5 id="开发步骤-1"><a href="#开发步骤-1" class="headerlink" title="开发步骤"></a>开发步骤</h5><h6 id="CC注册SOAP适配器"><a href="#CC注册SOAP适配器" class="headerlink" title="CC注册SOAP适配器"></a>CC注册SOAP适配器</h6><ol><li>登录您的AWS PaaS实例控制台</li><li>访问“连接服务”页面</li><li>点击“新建”按钮</li><li>选择“访问SOAP Web服务”</li><li>点击“确定”按钮，完成新建</li></ol><h6 id="新建Job"><a href="#新建Job" class="headerlink" title="新建Job"></a>新建Job</h6><ol><li>访问“调度服务”页面</li><li>点击“新建”按钮</li><li>选择“SOAP Job // 定时访问SOAP Web服务”</li><li>点击“确定”按钮，完成新建</li></ol><h6 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h6><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">任务名称</td><td align="left">易于运维人员了解的Job名，如<code>定时批量更新ERP付款状态</code></td></tr><tr><td align="left">CC SOAP</td><td align="left">访问列表，由AWS CC提供的SOAP技术适配器</td></tr><tr><td align="left">调用条件</td><td align="left">true/false值，当值为false时不执行（可选）。支持基本的@公式</td></tr><tr><td align="left">请求参数</td><td align="left">一个JSON串（可选），key/value对应该SOAP服务的方法参数和值。支持基本的@公式，如<code>&#123;&quot;param1&quot;:&quot;来自SOAP Job的调度请求 - @date&quot;&#125;</code></td></tr><tr><td align="left">触发规则</td><td align="left">执行该Job的循环策略</td></tr><tr><td align="left">通知规则</td><td align="left">执行该Job的通知规则，支持邮件通知、企业微信、钉钉通知，详见<a href="https://docs.awspaas.com/apps/com.actionsoft.apps.addons.mail/appendix/scenes.html#a">邮件通知</a></td></tr></tbody></table><h4 id="创建HTTP-Job"><a href="#创建HTTP-Job" class="headerlink" title="创建HTTP Job"></a>创建HTTP Job</h4><p>在指定的触发条件执行一次或周期重复执行指定的HTTP服务，该服务指向一个AWS CC的HTTP适配器。</p><h5 id="开发步骤-2"><a href="#开发步骤-2" class="headerlink" title="开发步骤"></a>开发步骤</h5><h6 id="CC，注册HTTP适配器"><a href="#CC，注册HTTP适配器" class="headerlink" title="CC，注册HTTP适配器"></a>CC，注册HTTP适配器</h6><ol><li>登录您的AWS PaaS实例控制台</li><li>访问“连接服务”页面</li><li>点击“新建”按钮</li><li>选择“访问Http(s) Web服务”</li><li>点击“确定”按钮，完成新建。</li></ol><h6 id="新建Job-1"><a href="#新建Job-1" class="headerlink" title="新建Job"></a>新建Job</h6><ol><li>访问“调度服务”页面</li><li>点击“新建”按钮</li><li>选择“HTTP Job // 定时访问Http(s) Web服务”</li><li>点击“确定”按钮，完成新建</li></ol><h6 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h6><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">任务名称</td><td align="left">易于运维人员了解的Job名</td></tr><tr><td align="left">CC HTTP</td><td align="left">访问列表，由AWS CC提供的HTTP技术适配器</td></tr><tr><td align="left">调用条件</td><td align="left">true/false值，当值为false时不执行（可选）。支持基本的@公式</td></tr><tr><td align="left">请求参数</td><td align="left">一个JSON串（可选），key/value对应该URL的参数和值。支持基本的@公式，如<code>&#123;&quot;msg&quot;:&quot;来自HTTP Job的调度请求 - @date&quot;&#125;</code></td></tr><tr><td align="left">触发规则</td><td align="left">执行该Job的循环策略</td></tr><tr><td align="left">通知规则</td><td align="left">执行该Job的通知规则，支持邮件通知、企业微信、钉钉通知，详见<a href="https://docs.awspaas.com/apps/com.actionsoft.apps.addons.mail/appendix/scenes.html#a">邮件通知</a></td></tr></tbody></table><h4 id="创建SQL-Job"><a href="#创建SQL-Job" class="headerlink" title="创建SQL Job"></a>创建SQL Job</h4><p>在指定的触发条件执行一次或周期重复执行指定的数据库SQL。</p><h5 id="开发步骤-3"><a href="#开发步骤-3" class="headerlink" title="开发步骤"></a>开发步骤</h5><h6 id="新建Job-2"><a href="#新建Job-2" class="headerlink" title="新建Job"></a>新建Job</h6><ol><li>访问“调度服务”页面</li><li>点击“新建”按钮</li><li>选择“SQL Job // 定时执行数据库SQL”</li><li>点击“确定”按钮，完成新建</li></ol><h6 id="配置-3"><a href="#配置-3" class="headerlink" title="配置"></a>配置</h6><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">任务名称</td><td align="left">易于运维人员了解的Job名，如<code>转移60天后的日志数据</code></td></tr><tr><td align="left">DB连接</td><td align="left">数据源列表，由AWS CC提供的JDBC技术适配器</td></tr><tr><td align="left">开启事务</td><td align="left">SQL操作要么全部成功，要么全部回滚</td></tr><tr><td align="left">SQL</td><td align="left">SELECT/UPDATE/DELETE语句，多个按顺序执行，支持简单@公式</td></tr><tr><td align="left">触发规则</td><td align="left">执行该Job的循环策略</td></tr><tr><td align="left">通知规则</td><td align="left">执行该Job的通知规则，支持邮件通知、企业微信、钉钉通知，详见<a href="https://docs.awspaas.com/apps/com.actionsoft.apps.addons.mail/appendix/scenes.html#a">邮件通知</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> BPM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 炎黄BPM </tag>
            
            <tag> BPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>炎黄BPM学习(一)</title>
      <link href="/2021/06/10/%E7%82%8E%E9%BB%84BPm%E5%AD%A6%E4%B9%A0-%E4%B8%80/"/>
      <url>/2021/06/10/%E7%82%8E%E9%BB%84BPm%E5%AD%A6%E4%B9%A0-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h3 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h3><ol><li>手动将<code>%AWS_HOME%/db_script</code>目录下对应数据库脚本文件初始化到您已准备好的的AWS数据库里</li><li>使用<code>%AWS_HOME%/bin/passwd.bat</code> 文件，生成AWS数据库密码的加密密码</li><li>修改<code>%AWS_HOME%/bin/conf/server.xml </code>文件中数据库连接信息<database/>，其中密码为步骤2生成的加密密</li><li>执行<code>%AWS_HOME%/bin/httpd-startup.sh</code>  和  <code>aws_startup.sh (linux)</code>,<code>startup(windows)</code>启动AWS服务</li><li>访问地址： <code>http://localhost:8088/portal/console</code>   用户名admin  密码 1</li></ol><h3 id="二、许可申请"><a href="#二、许可申请" class="headerlink" title="二、许可申请"></a>二、许可申请</h3><h4 id="获取机器码"><a href="#获取机器码" class="headerlink" title="获取机器码"></a>获取机器码</h4><ol><li>打开安装目录下的bin文件夹找到licensekey文件。</li><li>打开licensekey文件（Windows运行.bat文件；Linux打开.sh文件）。</li><li>请输入想要申请授权的<a href="#_%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97IP%E5%9C%B0%E5%9D%80">IP地址</a>，回车。中间部分即为机器码。</li><li>把获得的机器码，复制发送给炎黄盈动的人员，重新申请新的软件授权许可文件(license)。</li></ol><h4 id="获得授权文件"><a href="#获得授权文件" class="headerlink" title="获得授权文件"></a>获得授权文件</h4><p>将得到的license文件，复制到安装目录下的bin文件中，重启服务器就可以了。</p><h3 id="三、创建和分发应用"><a href="#三、创建和分发应用" class="headerlink" title="三、创建和分发应用"></a>三、创建和分发应用</h3><p>注意授权即可。其他的详见官方文档。</p><h3 id="四、设计部署流程"><a href="#四、设计部署流程" class="headerlink" title="四、设计部署流程"></a>四、设计部署流程</h3><p>简单流程： 创建应用-》创建流程-》测试流程-》部署流程-》访问流程</p><p>带表单流程：创建应用-》创建流程-》测试流程-》部署流程-》访问流程-》创建表单（创建BO、创建表单、绑定到流程、测试表单</p><p>​    创建表单流程： 创建存储模型-》创建表单模型</p><p>​    <em>使用@公式，将表单数据提取到流程和任务标题上</em></p><p>​    eg. @form(BO_EU_SUPPORT,NO)-@form(BO_EU_SUPPORT,QTITLE)</p><h3 id="五、部署DW数据管理"><a href="#五、部署DW数据管理" class="headerlink" title="五、部署DW数据管理"></a>五、部署DW数据管理</h3><p>数据视图</p><h3 id="六、部署方案"><a href="#六、部署方案" class="headerlink" title="六、部署方案"></a>六、部署方案</h3><p><a href="https://docs.awspaas.com/help/install/#a">本地私有部署</a>、<a href="https://docs.awspaas.com/help/install/#f">云环境部署</a>、<a href="https://docs.awspaas.com/help/install/#e">Docker+Kubernetes容器部署</a></p><h3 id="七、开发指南"><a href="#七、开发指南" class="headerlink" title="七、开发指南"></a>七、开发指南</h3><h4 id="7-1、开发环境搭建，idea环境搭建。"><a href="#7-1、开发环境搭建，idea环境搭建。" class="headerlink" title="7.1、开发环境搭建，idea环境搭建。"></a>7.1、开发环境搭建，idea环境搭建。</h4><p>  导入导入AWS PaaS平台 bin/patch(如有)、bin/jdbc、bin/lib 目录及其子目录内所有jar包。</p><ul><li>配置启动类为<code>aws-infrastructure-common.jar</code>的<code>StartUp</code></li><li>Working directory 目录为 <code>%AWS_HOME%/bin</code></li></ul><p>如图所示<img src="C:\Users\Administrator\Desktop\小Q书桌-截图\小Q截图-20210610115055.png" alt="小Q截图-20210610115055"></p><p>最后手动执行%AWS_HOME%/bin/httpd-startup.bat(sh)脚本启动AWS WEB服务。</p><h4 id="7-2、开发流程事件"><a href="#7-2、开发流程事件" class="headerlink" title="7.2、开发流程事件"></a>7.2、开发流程事件</h4><ul><li>继承父类（通常不同类型的事件提供不同的父类），基于<a href="https://docs.awspaas.com/reference-guide/aws-paas-process-listener-reference-guide/introduction/interface.html">接口编程</a></li><li>注册到指定的流程中，等待触发</li></ul><h5 id="1、开发步骤"><a href="#1、开发步骤" class="headerlink" title="1、开发步骤"></a>1、开发步骤</h5><ul><li>继承事件<a href="https://docs.awspaas.com/reference-guide/aws-paas-process-listener-reference-guide/introduction/interface.html">编程接口</a>，完成代码开发</li><li>将jar打包到该App的资源目录（install/%appId%/lib）</li><li>选择事件类型之后，自动查找该类型对应的实现类</li><li>测试流程执行，在IDE调试代码</li><li>注册事件【人工任务】人工任务属性</li><li>事件触发器显示java规则<ul><li>根据类中继承的抽象类进行匹配</li><li>下拉列表的展示内容：类名，描述，版本号，开发商</li><li>读取类的成员变量信息，自动生成扩展属性。key值格式：事件名_类名_成员变量名</li><li>运行时刻使用填写的值给成员变量赋值</li><li>支持已经注册的类的刷新动作，用于成员变量有变化时初始化扩展参数。</li></ul></li></ul><p><strong>成员变量</strong></p><ul><li>事件触发器类提供成员变量的定义，运行时刻，会使用对应的值进行初始化，目前支持类型：String、Date、Integer、Long、Double、Boolean</li></ul><p><strong>编程接口</strong> </p><table><thead><tr><th align="left">接口</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">InterruptListenerInterface</td><td align="left">-返回Boolean，中断操作 - 开发者继承<strong>InterruptListener</strong>抽象类</td></tr><tr><td align="left">ValueListenerInterface</td><td align="left">-返回String，取值操作 -开发者继承<strong>ValueListener</strong>抽象类</td></tr><tr><td align="left">ExecuteListenerInterface</td><td align="left">-逻辑处理 -开发者继承<strong>ExecuteListener</strong>抽象类</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.InterruptListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_PROCESS_BEFORE_COMPLETED</span> <span class="keyword">extends</span> <span class="title">InterruptListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;测试用例&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        info(<span class="string">&quot;流程完成前事件被触发--&gt;&quot;</span> + ctx.getProcessInstance());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、事件清单"><a href="#2、事件清单" class="headerlink" title="2、事件清单"></a>2、事件清单</h5><h6 id="Process-Event"><a href="#Process-Event" class="headerlink" title="Process Event"></a>Process Event</h6><p><strong>流程通用事件</strong></p><p>无论是人工流程还是系统短流程，都被触发的事件</p><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><a href="#PROCESS_BEFORE_CREATE">PROCESS_BEFORE_CREATE</a></td><td align="left">流程创建前</td></tr><tr><td align="left"><a href="#PROCESS_AFTER_CREATE">PROCESS_AFTER_CREATE</a></td><td align="left">流程创建后</td></tr><tr><td align="left"><a href="#PROCESS_START">PROCESS_START</a></td><td align="left">流程启动</td></tr><tr><td align="left"><a href="#PROCESS_SUSPEND">PROCESS_SUSPEND</a></td><td align="left">流程挂起</td></tr><tr><td align="left"><a href="#PROCESS_RESUME">PROCESS_RESUME</a></td><td align="left">流程恢复</td></tr><tr><td align="left"><a href="#PROCESS_BEFORE_COMPLETE">PROCESS_BEFORE_COMPLETE</a></td><td align="left">流程完成前</td></tr><tr><td align="left"><a href="#PROCESS_AFTER_COMPLETE">PROCESS_AFTER_COMPLETE</a></td><td align="left">流程完成后</td></tr><tr><td align="left"><a href="#PROCESS_BEFORE_TERMINATE">PROCESS_BEFORE_TERMINATE</a></td><td align="left">流程终止前</td></tr><tr><td align="left"><a href="#PROCESS_AFTER_TERMINATE">PROCESS_AFTER_TERMINATE</a></td><td align="left">流程终止后</td></tr><tr><td align="left"><a href="#PROCESS_BEFORE_CANCEL">PROCESS_BEFORE_CANCEL</a></td><td align="left">流程取消前</td></tr><tr><td align="left"><a href="#PROCESS_AFTER_CANCEL">PROCESS_AFTER_CANCEL</a></td><td align="left">流程取消后</td></tr><tr><td align="left"><a href="#PROCESS_BEFORE_DELETE">PROCESS_BEFORE_DELETE</a></td><td align="left">流程删除前</td></tr><tr><td align="left"><a href="#PROCESS_AFTER_DELETE">PROCESS_AFTER_DELETE</a></td><td align="left">流程删除后</td></tr><tr><td align="left"><a href="#PROCESS_BEFORE_REACTIVATE">PROCESS_BEFORE_REACTIVATE</a></td><td align="left">流程复活前</td></tr><tr><td align="left"><a href="#PROCESS_AFTER_REACTIVATE">PROCESS_AFTER_REACTIVATE</a></td><td align="left">流程复活后</td></tr></tbody></table><p><strong>人工流程专有事件</strong></p><p>含有人工节点的流程范围内全局事件</p><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><a href="#PROCESS_ACTIVITY_ADHOC_BRANCH">PROCESS_ACTIVITY_ADHOC_BRANCH</a></td><td align="left">程序指定后继路线和参与者。如果节点定义了ACTIVITY_ADHOC_BRANCH事件，则优先应用节点的实现</td></tr><tr><td align="left"><a href="#PROCESS_FORM_GRID_FILTER">PROCESS_FORM_GRID_FILTER</a></td><td align="left">全局表单子表过滤。如果节点定义了FORM_GRID_FILTER事件，则优先应用节点实现</td></tr><tr><td align="left"><a href="#PROCESS_FORM_BEFORE_LOAD">PROCESS_FORM_BEFORE_LOAD</a></td><td align="left">全局表单加载前事件。如果节点定义了FORM_BEFORE_LOAD事件，则优先应用节点实现</td></tr><tr><td align="left"><a href="#PROCESS_FORM_AFTER_LOAD">PROCESS_FORM_AFTER_LOAD</a></td><td align="left">全局表单加载后事件。如果节点定义了FORM_AFTER_LOAD事件，则优先应用节点实现</td></tr></tbody></table><p><strong>子流程专有事件</strong></p><p>含有子流程节点的流程范围内全局事件</p><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><a href="https://docs.awspaas.com/reference-guide/aws-paas-process-listener-reference-guide/callactivity_event/callactivity_before_subprocess_start.html">CALLACTIVITY_BEFORE_SUBPROCESS_START</a></td><td align="left">子流程实例创建后启动前事件</td></tr><tr><td align="left"><a href="https://docs.awspaas.com/reference-guide/aws-paas-process-listener-reference-guide/callactivity_event/callactivity_after_subprocess_complete.html">CALLACTIVITY_AFTER_SUBPROCESS_COMPLETE</a></td><td align="left">子流程实例结束后事件</td></tr></tbody></table><h6 id="Activity-Event"><a href="#Activity-Event" class="headerlink" title="Activity Event"></a>Activity Event</h6><p><strong>节点通用事件</strong></p><p>流程中各种节点都会触发的事件</p><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><a href="https://docs.awspaas.com/reference-guide/aws-paas-process-listener-reference-guide/activity_event/task_before_complete.html">TASK_BEFORE_COMPLETE</a></td><td align="left">任务完成前</td></tr><tr><td align="left"><a href="https://docs.awspaas.com/reference-guide/aws-paas-process-listener-reference-guide/activity_event/task_after_complete.html">TASK_AFTER_COMPLETE</a></td><td align="left">任务完成后</td></tr><tr><td align="left"><a href="https://docs.awspaas.com/reference-guide/aws-paas-process-listener-reference-guide/activity_event/task_suspend.html">TASK_SUSPEND</a></td><td align="left">任务挂起</td></tr><tr><td align="left"><a href="https://docs.awspaas.com/reference-guide/aws-paas-process-listener-reference-guide/activity_event/task_resume.html">TASK_RESUME</a></td><td align="left">任务恢复</td></tr><tr><td align="left"><a href="https://docs.awspaas.com/reference-guide/aws-paas-process-listener-reference-guide/activity_event/activity_before_leave.html">ACTIVITY_BEFORE_LEAVE</a></td><td align="left">节点离开前</td></tr><tr><td align="left"><a href="https://docs.awspaas.com/reference-guide/aws-paas-process-listener-reference-guide/activity_event/activity_after_leave.html">ACTIVITY_AFTER_LEAVE</a></td><td align="left">节点离开后</td></tr></tbody></table><p><strong>UserTask节点专有事件</strong></p><p>当该节点为“UserTask”类型时，以下事件被触发</p><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><a href="https://docs.awspaas.com/reference-guide/aws-paas-process-listener-reference-guide/usertask_event/activity_adhoc_branch.html">ACTIVITY_ADHOC_BRANCH</a></td><td align="left">程序指定后继路线和参与者</td></tr><tr><td align="left"><a href="https://docs.awspaas.com/reference-guide/aws-paas-process-listener-reference-guide/usertask_event/activity_confirm_participants.html">ACTIVITY_CONFIRM_PARTICIPANTS</a></td><td align="left">节点就绪参与者即将产生任务</td></tr><tr><td align="left"><a href="https://docs.awspaas.com/reference-guide/aws-paas-process-listener-reference-guide/usertask_event/task_before_undo.html">TASK_BEFORE_UNDO</a></td><td align="left">任务收回前被触发</td></tr><tr><td align="left"><a href="https://docs.awspaas.com/reference-guide/aws-paas-process-listener-reference-guide/usertask_event/task_after_undo.html">TASK_AFTER_UNDO</a></td><td align="left">任务收回后被触发</td></tr><tr><td align="left"><a href="https://docs.awspaas.com/reference-guide/aws-paas-process-listener-reference-guide/form_event/form_complete_validate.html">FORM_COMPLETE_VALIDATE</a></td><td align="left">流程表单办理前校验</td></tr><tr><td align="left"><a href="https://docs.awspaas.com/reference-guide/aws-paas-process-listener-reference-guide/form_event/form_toolbar_build.html">FORM_TOOLBAR_BUILD</a></td><td align="left">表单工具栏构建</td></tr><tr><td align="left"><a href="https://docs.awspaas.com/reference-guide/aws-paas-process-listener-reference-guide/form_event/form_before_load.html">FORM_BEFORE_LOAD</a></td><td align="left">表单加载前</td></tr><tr><td align="left"><a href="https://docs.awspaas.com/reference-guide/aws-paas-process-listener-reference-guide/form_event/form_after_load.html">FORM_AFTER_LOAD</a></td><td align="left">表单加载后</td></tr><tr><td align="left"><a href="https://docs.awspaas.com/reference-guide/aws-paas-process-listener-reference-guide/form_event/form_before_save.html">FORM_BEFORE_SAVE</a></td><td align="left">表单保存前</td></tr><tr><td align="left"><a href="https://docs.awspaas.com/reference-guide/aws-paas-process-listener-reference-guide/form_event/form_after_save.html">FORM_AFTER_SAVE</a></td><td align="left">表单保存后</td></tr><tr><td align="left"><a href="https://docs.awspaas.com/reference-guide/aws-paas-process-listener-reference-guide/form_event/form_before_remove.html">FORM_BEFORE_REMOVE</a></td><td align="left">表单删除前</td></tr><tr><td align="left"><a href="https://docs.awspaas.com/reference-guide/aws-paas-process-listener-reference-guide/form_event/form_after_remove.html">FORM_AFTER_REMOVE</a></td><td align="left">表单删除后</td></tr><tr><td align="left"><a href="https://docs.awspaas.com/reference-guide/aws-paas-process-listener-reference-guide/form_event/form_grid_filter.html">FORM_GRID_FILTER</a></td><td align="left">表单子表过滤</td></tr><tr><td align="left"><a href="https://docs.awspaas.com/reference-guide/aws-paas-process-listener-reference-guide/form_event/form_grid_excel_transform.html">FORM_GRID_EXCEL_TRANSFORM</a></td><td align="left">表单子表Excel转换处理</td></tr></tbody></table><h6 id="全局事件"><a href="#全局事件" class="headerlink" title="全局事件"></a>全局事件</h6><p>以下事件被引擎全局捕获</p><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">TASK_CREATE</td><td align="left">任务创建后</td></tr><tr><td align="left">TASK_READ</td><td align="left">任务阅读后</td></tr><tr><td align="left">TASK_COMPLETE</td><td align="left">任务执行完</td></tr><tr><td align="left">TASK_DELETE</td><td align="left">任务删除后</td></tr><tr><td align="left">TASK_SUSPEND</td><td align="left">任务挂起后</td></tr><tr><td align="left">TASK_RESUME</td><td align="left">任务恢复后</td></tr></tbody></table><h5 id="3、上下文对象-ProcessExecutionContext"><a href="#3、上下文对象-ProcessExecutionContext" class="headerlink" title="3、上下文对象-ProcessExecutionContext"></a>3、上下文对象-ProcessExecutionContext</h5><h6 id="ctx常用方法"><a href="#ctx常用方法" class="headerlink" title="ctx常用方法"></a>ctx常用方法</h6><ul><li>getProcessInstance 获得当前流程实例对象</li><li>getTaskInstance 获得当前任务实例对象</li><li>getUserContext 获得当前用户上下文对象</li><li>getVariable 读取指定的流程变量</li><li>isChoiceActionMenu 当前人工任务是否选中了指定的审核菜单</li><li>execAtScript 执行@公式脚本</li><li>addFormReadOnlyPolicy 程序指定BO操作只读（优先级最高）</li><li>addFormEditablePolicy 程序指定BO可编辑（优先级最高）</li><li>addFormHiddenPolicy 程序指定BO字段隐藏（优先级最高）</li><li>addFormDisplayPolicy 程序指定BO字段显示（优先级最高）</li><li>addGridHiddenPolicy 程序指定子表列的BO字段隐藏（优先级最高）</li><li>addGridDisplayPolicy 程序指定子表列的BO字段显示（优先级最高）</li><li>addFormNotNullPolicy 程序指定BO字段必填（优先级最高）</li><li>addFormNullablePolicy 程序指定BO字段选填（优先级最高）</li><li>addGridColumnPolicy 程序指定子表列头的字段信息（可控制显示顺序，优先级最高，高于子表列字段的显示隐藏策略）</li></ul><h5 id="4、常用SDKAPI"><a href="#4、常用SDKAPI" class="headerlink" title="4、常用SDKAPI"></a>4、常用SDKAPI</h5><ul><li><p>DBSql 本地数据库操作</p></li><li><p>SDK.getBOAPI BO表读、写、查操作</p></li><li><p>SDK.getRuleAPI 执行规则脚本</p></li><li><p>SDK.getCCAPI 执行CC连接</p></li><li><p>SDK.getProcessAPI 流程实例控制</p></li><li><p>SDK.getProcessQueryAPI 流程实例查询</p></li><li><p>SDK.getTaskAPI 任务实例控制</p></li><li><p>SDK.getTaskQueryAPI 任务查询</p></li><li><p>SDK.getHistoryTaskQueryAPI 历史任务查询</p></li><li><p>SDK.getAppAPI 应用API，如执行ASLP</p></li><li><p>SDK.getORGAPI 组织结构查询、处理</p></li><li><p>SDK.getFormAPI 表单接口</p><h5 id="5、流程事件"><a href="#5、流程事件" class="headerlink" title="5、流程事件"></a>5、流程事件</h5></li></ul><h6 id="PROCESS-BEFORE-CREATE"><a href="#PROCESS-BEFORE-CREATE" class="headerlink" title="PROCESS_BEFORE_CREATE"></a><a href="#PROCESS_BEFORE_CREATE">PROCESS_BEFORE_CREATE</a></h6><p><strong>流程创建前被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">InterruptListener</td></tr><tr><td align="left">接口</td><td align="left">InterruptListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">返回false，流程创建被阻止</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，流程创建失败 -其中抛出BPMNError异常时，若该流程为子流程可被父流程CallActivity定义的 边界错误事件捕获。如未定义，业务错误信息包装成结果返回</td></tr></tbody></table><p><strong>新建流程</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建流程实例</span></span><br><span class="line">ProcessInstance processInst = SDK.getProcessAPI().createProcessInstance(processDefId, processBusinessKey,uid,createUserDeptId,createUserRoleId,title,vars);</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.InterruptListener;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.exception.BPMNError;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_PROCESS_BEFORE_CREATED</span> <span class="keyword">extends</span> <span class="title">InterruptListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;测试用例&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        info(<span class="string">&quot;流程创建前事件被触发&quot;</span>);</span><br><span class="line">        String str1 = ctx.getParameterOfString(<span class="string">&quot;str1&quot;</span>);<span class="comment">// 从临时变量中获得，在创建前尚未保存流程变量值</span></span><br><span class="line">        <span class="keyword">if</span> (str1 == <span class="keyword">null</span> || str1.equals(<span class="string">&quot;begin&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 模拟抛出业务异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BPMNError(<span class="string">&quot;BIZ001&quot;</span>, <span class="string">&quot;PROCESS_BEFORE_CREATED事件模拟抛出业务异常&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="PROCESS-AFTER-CREATE"><a href="#PROCESS-AFTER-CREATE" class="headerlink" title="PROCESS_AFTER_CREATE"></a><a href="#PROCESS_AFTER_CREATE">PROCESS_AFTER_CREATE</a></h6><p><strong>流程创建后被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">ExecuteListener</td></tr><tr><td align="left">接口</td><td align="left">ExecuteListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">无</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断 -其中抛出BPMNError异常时，若该流程为子流程可被父流程CallActivity定义的 边界错误事件捕获。如未定义，业务错误信息包装成结果返回</td></tr></tbody></table><p><strong>新建流程</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建流程实例</span></span><br><span class="line">ProcessInstance processInst = SDK.getProcessAPI().createProcessInstance(processDefId, processBusinessKey,uid,createUserDeptId,createUserRoleId,title,vars);</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ExecuteListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_PROCESS_AFTER_CREATED</span> <span class="keyword">extends</span> <span class="title">ExecuteListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;测试用例&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        info(<span class="string">&quot;流程创建后事件被触发--&gt;&quot;</span> + ctx.getProcessInstance());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="PROCESS-START"><a href="#PROCESS-START" class="headerlink" title="PROCESS_START"></a><a href="#PROCESS_START">PROCESS_START</a></h6><p><strong>流程启动后被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">ExecuteListener</td></tr><tr><td align="left">接口</td><td align="left">ExecuteListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">无</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断</td></tr></tbody></table><p><strong>启动流程</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建流程实例</span></span><br><span class="line">ProcessInstance processInst = SDK.getProcessAPI().createProcessInstance(processDefId, processBusinessKey,uid,createUserDeptId,createUserRoleId,title,vars);</span><br><span class="line"><span class="comment">//从默认的开始事件启动流程</span></span><br><span class="line">List&lt;TaskInstance&gt; tasks = SDK.getProcessAPI().start(processInst, <span class="keyword">null</span>).fetchActiveTasks();</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ExecuteListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_PROCESS_START</span> <span class="keyword">extends</span> <span class="title">ExecuteListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;测试用例&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        info(<span class="string">&quot;流程启动后事件被触发--&gt;&quot;</span> + ctx.getProcessExecutionTracks());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="PROCESS-SUSPEND"><a href="#PROCESS-SUSPEND" class="headerlink" title="PROCESS_SUSPEND"></a><a href="#PROCESS_SUSPEND">PROCESS_SUSPEND</a></h6><p><strong>流程挂起后被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">ExecuteListener</td></tr><tr><td align="left">接口</td><td align="left">ExecuteListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">无</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断</td></tr></tbody></table><p><strong>流程挂起</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建流程实例</span></span><br><span class="line">ProcessInstance processInst = SDK.getProcessAPI().createProcessInstance(processDefId, processBusinessKey,uid,createUserDeptId,createUserRoleId,title,vars);</span><br><span class="line"><span class="comment">//从默认的开始事件启动流程</span></span><br><span class="line">List&lt;TaskInstance&gt; tasks = SDK.getProcessAPI().start(processInst, <span class="keyword">null</span>).fetchActiveTasks();</span><br><span class="line"><span class="comment">//挂起流程实例</span></span><br><span class="line">SDK.getProcessAPI().suspend(processInst);</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ExecuteListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_PROCESS_SUSPEND</span> <span class="keyword">extends</span> <span class="title">ExecuteListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;测试用例&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        info(<span class="string">&quot;流程挂起后事件被触发--&gt;&quot;</span> + ctx.getProcessInstance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="PROCESS-RESUME"><a href="#PROCESS-RESUME" class="headerlink" title="PROCESS_RESUME"></a><a href="#PROCESS_RESUME">PROCESS_RESUME</a></h6><p><strong>流程恢复后被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">ExecuteListener</td></tr><tr><td align="left">接口</td><td align="left">ExecuteListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">无</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断</td></tr></tbody></table><p><strong>流程恢复</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建流程实例</span></span><br><span class="line">ProcessInstance processInst = SDK.getProcessAPI().createProcessInstance(processDefId, processBusinessKey,uid,createUserDeptId,createUserRoleId,title,vars);</span><br><span class="line"><span class="comment">//从默认的开始事件启动流程</span></span><br><span class="line">List&lt;TaskInstance&gt; tasks = SDK.getProcessAPI().start(processInst, <span class="keyword">null</span>).fetchActiveTasks();</span><br><span class="line"><span class="comment">//恢复流程实例</span></span><br><span class="line">SDK.getProcessAPI().resume(processInst);</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ExecuteListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_PROCESS_RESUME</span> <span class="keyword">extends</span> <span class="title">ExecuteListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;测试用例&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        info(<span class="string">&quot;流程恢复后事件被触发--&gt;&quot;</span> + ctx.getProcessInstance());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="PROCESS-BEFORE-COMPLETE"><a href="#PROCESS-BEFORE-COMPLETE" class="headerlink" title="PROCESS_BEFORE_COMPLETE"></a><a href="#PROCESS_BEFORE_COMPLETE">PROCESS_BEFORE_COMPLETE</a></h6><p><strong>流程完成（结束）前被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">InterruptListener</td></tr><tr><td align="left">接口</td><td align="left">InterruptListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">返回false，流程结束被阻止，该分支被孤立中断</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断 -其中抛出BPMNError异常时，若该流程为子流程可被父流程CallActivity定义的 边界错误事件捕获。如未定义，业务错误信息包装成结果返回</td></tr></tbody></table><p><strong>流程结束</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建流程实例</span></span><br><span class="line">ProcessInstance processInst = SDK.getProcessAPI().createProcessInstance(processDefId, processBusinessKey,uid,createUserDeptId,createUserRoleId,title,vars);</span><br><span class="line"><span class="comment">//从默认的开始事件启动流程</span></span><br><span class="line">List&lt;TaskInstance&gt; tasks = SDK.getProcessAPI().start(processInst, <span class="keyword">null</span>).fetchActiveTasks();</span><br><span class="line"></span><br><span class="line"><span class="comment">//自然结束流程实例时（最后一个任务）</span></span><br><span class="line">SDK.getTaskAPI().completeTask(tasks.get(<span class="number">0</span>), UserContext.fromUID(startUser), <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者终止一个流程实例时</span></span><br><span class="line">SDK.getProcessAPI().terminate(processInst,UserContext.fromUID(terminateUser));</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.InterruptListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_PROCESS_BEFORE_COMPLETED</span> <span class="keyword">extends</span> <span class="title">InterruptListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;测试用例&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        info(<span class="string">&quot;流程完成前事件被触发--&gt;&quot;</span> + ctx.getProcessInstance());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="PROCESS-AFTER-COMPLETE"><a href="#PROCESS-AFTER-COMPLETE" class="headerlink" title="PROCESS_AFTER_COMPLETE"></a><a href="#PROCESS_AFTER_COMPLETE">PROCESS_AFTER_COMPLETE</a></h6><p><strong>流程完成（结束）后被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">ExecuteListener</td></tr><tr><td align="left">接口</td><td align="left">ExecuteListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">无</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断 -其中抛出BPMNError异常时，若该流程为子流程可被父流程CallActivity定义的 边界错误事件捕获。如未定义，业务错误信息包装成结果返回</td></tr></tbody></table><p><strong>流程结束</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建流程实例</span></span><br><span class="line">ProcessInstance processInst = SDK.getProcessAPI().createProcessInstance(processDefId, processBusinessKey,uid,createUserDeptId,createUserRoleId,title,vars);</span><br><span class="line"><span class="comment">//从默认的开始事件启动流程</span></span><br><span class="line">List&lt;TaskInstance&gt; tasks = SDK.getProcessAPI().start(processInst, <span class="keyword">null</span>).fetchActiveTasks();</span><br><span class="line"></span><br><span class="line"><span class="comment">//自然结束流程实例时（最后一个任务）</span></span><br><span class="line">SDK.getTaskAPI().completeTask(tasks.get(<span class="number">0</span>), UserContext.fromUID(startUser), <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者终止一个流程实例时</span></span><br><span class="line">SDK.getProcessAPI().terminate(processInst,UserContext.fromUID(terminateUser))</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ExecuteListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_PROCESS_AFTER_COMPLETED</span> <span class="keyword">extends</span> <span class="title">ExecuteListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;测试用例&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        info(<span class="string">&quot;流程完成后事件被触发--&gt;&quot;</span> + ctx.getProcessInstance());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="PROCESS-BEFORE-TERMINATE"><a href="#PROCESS-BEFORE-TERMINATE" class="headerlink" title="PROCESS_BEFORE_TERMINATE"></a><a href="#PROCESS_BEFORE_TERMINATE">PROCESS_BEFORE_TERMINATE</a></h6><p><strong>流程终止前被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">InterruptListener</td></tr><tr><td align="left">接口</td><td align="left">InterruptListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">返回false，流程终止被阻止，该分支被孤立中断</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断 -其中抛出BPMNError异常时，若该流程为子流程可被父流程CallActivity定义的 边界错误事件捕获。如未定义，业务错误信息包装成结果返回</td></tr></tbody></table><p><strong>流程终止</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建流程实例</span></span><br><span class="line">ProcessInstance processInst = SDK.getProcessAPI().createProcessInstance(processDefId, processBusinessKey,uid,createUserDeptId,createUserRoleId,title,vars);</span><br><span class="line"><span class="comment">//从默认的开始事件启动流程</span></span><br><span class="line">List&lt;TaskInstance&gt; tasks = SDK.getProcessAPI().start(processInst, <span class="keyword">null</span>).fetchActiveTasks();</span><br><span class="line"></span><br><span class="line"><span class="comment">//终止一个流程实例时</span></span><br><span class="line">SDK.getProcessAPI().terminate(processInst,UserContext.fromUID(terminateUser));</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.InterruptListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_PROCESS_BEFORE_TERMINATED</span> <span class="keyword">extends</span> <span class="title">InterruptListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;测试用例&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        info(<span class="string">&quot;流程终止前事件被触发--&gt;&quot;</span> + ctx.getProcessInstance());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="PROCESS-AFTER-TERMINATE"><a href="#PROCESS-AFTER-TERMINATE" class="headerlink" title="PROCESS_AFTER_TERMINATE"></a><a href="#PROCESS_AFTER_TERMINATE">PROCESS_AFTER_TERMINATE</a></h6><p><strong>流程终止后被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">ExecuteListener</td></tr><tr><td align="left">接口</td><td align="left">ExecuteListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">无</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断 -其中抛出BPMNError异常时，若该流程为子流程可被父流程CallActivity定义的 边界错误事件捕获。如未定义，业务错误信息包装成结果返回</td></tr></tbody></table><p><strong>流程终止</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建流程实例</span></span><br><span class="line">ProcessInstance processInst = SDK.getProcessAPI().createProcessInstance(processDefId, processBusinessKey,uid,createUserDeptId,createUserRoleId,title,vars);</span><br><span class="line"><span class="comment">//从默认的开始事件启动流程</span></span><br><span class="line">List&lt;TaskInstance&gt; tasks = SDK.getProcessAPI().start(processInst, <span class="keyword">null</span>).fetchActiveTasks();</span><br><span class="line"></span><br><span class="line"><span class="comment">//终止一个流程实例时</span></span><br><span class="line">SDK.getProcessAPI().terminate(processInst,UserContext.fromUID(terminateUser));</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ExecuteListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_PROCESS_AFTER_TERMINATED</span> <span class="keyword">extends</span> <span class="title">ExecuteListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;测试用例&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        info(<span class="string">&quot;流程终止后事件被触发--&gt;&quot;</span> + ctx.getProcessInstance());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="PROCESS-BEFORE-CANCEL"><a href="#PROCESS-BEFORE-CANCEL" class="headerlink" title="PROCESS_BEFORE_CANCEL"></a><a href="#PROCESS_BEFORE_CANCEL">PROCESS_BEFORE_CANCEL</a></h6><p><strong>流程取消前被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">InterruptListener</td></tr><tr><td align="left">接口</td><td align="left">InterruptListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">返回false，流程取消被阻止，该分支被孤立中断</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断 -其中抛出BPMNError异常时，若该流程为子流程可被父流程CallActivity定义的 边界错误事件捕获。如未定义，业务错误信息包装成结果返回</td></tr></tbody></table><p><strong>流程取消</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建流程实例</span></span><br><span class="line">ProcessInstance processInst = SDK.getProcessAPI().createProcessInstance(processDefId, processBusinessKey,uid,createUserDeptId,createUserRoleId,title,vars);</span><br><span class="line"><span class="comment">//从默认的开始事件启动流程</span></span><br><span class="line">List&lt;TaskInstance&gt; tasks = SDK.getProcessAPI().start(processInst, <span class="keyword">null</span>).fetchActiveTasks();</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消一个流程实例时</span></span><br><span class="line">SDK.getProcessAPI().cancel(processInst,UserContext.fromUID(cancelUser))</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.InterruptListener;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.util.UtilString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_PROCESS_BEFORE_CANCEL</span> <span class="keyword">extends</span> <span class="title">InterruptListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;测试用例&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        info(<span class="string">&quot;流程取消前事件被触发--&gt;&quot;</span> + ctx.getProcessInstance());</span><br><span class="line">        String str1 = (String) ctx.getVariable(<span class="string">&quot;str1&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (UtilString.isEmpty(str1) || !str1.equals(<span class="string">&quot;cancel yes&quot;</span>)) &#123;</span><br><span class="line">            info(<span class="string">&quot;流程取消前事件--&gt;测试str1必须为cancel yes值才可以取消&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            info(<span class="string">&quot;流程取消前事件--&gt;str1=&quot;</span> + str1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="PROCESS-AFTER-CANCEL"><a href="#PROCESS-AFTER-CANCEL" class="headerlink" title="PROCESS_AFTER_CANCEL"></a><a href="#PROCESS_AFTER_CANCEL">PROCESS_AFTER_CANCEL</a></h6><p><strong>流程取消后被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">ExecuteListener</td></tr><tr><td align="left">接口</td><td align="left">ExecuteListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">无</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断 -其中抛出BPMNError异常时，若该流程为子流程可被父流程CallActivity定义的 边界错误事件捕获。如未定义，业务错误信息包装成结果返回</td></tr></tbody></table><p><strong>流程取消</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建流程实例</span></span><br><span class="line">ProcessInstance processInst = SDK.getProcessAPI().createProcessInstance(processDefId, processBusinessKey,uid,createUserDeptId,createUserRoleId,title,vars);</span><br><span class="line"><span class="comment">//从默认的开始事件启动流程</span></span><br><span class="line">List&lt;TaskInstance&gt; tasks = SDK.getProcessAPI().start(processInst, <span class="keyword">null</span>).fetchActiveTasks();</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消一个流程实例时</span></span><br><span class="line">SDK.getProcessAPI().cancel(processInst,UserContext.fromUID(cancelUser));</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ExecuteListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_PROCESS_AFTER_CANCEL</span> <span class="keyword">extends</span> <span class="title">ExecuteListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;测试用例&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        info(<span class="string">&quot;流程取消后事件被触发--&gt;&quot;</span> + ctx.getProcessInstance());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="PROCESS-BEFORE-DELETE"><a href="#PROCESS-BEFORE-DELETE" class="headerlink" title="PROCESS_BEFORE_DELETE"></a><a href="#PROCESS_BEFORE_DELETE">PROCESS_BEFORE_DELETE</a></h6><p><strong>流程删除前被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">InterruptListener</td></tr><tr><td align="left">接口</td><td align="left">InterruptListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">返回false，流程删除被阻止</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断</td></tr></tbody></table><p><strong>流程取消</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建流程实例</span></span><br><span class="line">ProcessInstance processInst = SDK.getProcessAPI().createProcessInstance(processDefId, processBusinessKey,uid,createUserDeptId,createUserRoleId,title,vars);</span><br><span class="line"><span class="comment">//从默认的开始事件启动流程</span></span><br><span class="line">List&lt;TaskInstance&gt; tasks = SDK.getProcessAPI().start(processInst, <span class="keyword">null</span>).fetchActiveTasks();</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除一个流程实例时</span></span><br><span class="line">SDK.getProcessAPI().delete(processInst,UserContext.fromUID(deleteUser));</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.InterruptListener;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.util.UtilString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_PROCESS_BEFORE_DELETED</span> <span class="keyword">extends</span> <span class="title">InterruptListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;测试用例&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        info(<span class="string">&quot;流程删除前事件被触发--&gt;&quot;</span> + ctx.getProcessInstance());</span><br><span class="line">        String str1 = (String) ctx.getVariable(<span class="string">&quot;str1&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (UtilString.isEmpty(str1) || !str1.equals(<span class="string">&quot;remove yes&quot;</span>)) &#123;</span><br><span class="line">            info(<span class="string">&quot;流程删除前事件--&gt;测试str1必须为remove yes值才可以删除&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            info(<span class="string">&quot;流程删除前事件--&gt;str1=&quot;</span> + str1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="PROCESS-AFTER-DELETE"><a href="#PROCESS-AFTER-DELETE" class="headerlink" title="PROCESS_AFTER_DELETE"></a><a href="#PROCESS_AFTER_DELETE">PROCESS_AFTER_DELETE</a></h6><p><strong>流程删除后被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">ExecuteListener</td></tr><tr><td align="left">接口</td><td align="left">ExecuteListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">无</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断</td></tr></tbody></table><p><strong>流程删除</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建流程实例</span></span><br><span class="line">ProcessInstance processInst = SDK.getProcessAPI().createProcessInstance(processDefId, processBusinessKey,uid,createUserDeptId,createUserRoleId,title,vars);</span><br><span class="line"><span class="comment">//从默认的开始事件启动流程</span></span><br><span class="line">List&lt;TaskInstance&gt; tasks = SDK.getProcessAPI().start(processInst, <span class="keyword">null</span>).fetchActiveTasks();</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除一个流程实例时</span></span><br><span class="line">SDK.getProcessAPI().delete(processInst,UserContext.fromUID(deleteUser));</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ExecuteListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_PROCESS_AFTER_DELETED</span> <span class="keyword">extends</span> <span class="title">ExecuteListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;测试用例&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        info(<span class="string">&quot;流程删除后事件被触发--&gt;&quot;</span> + ctx.getProcessInstance());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="PROCESS-BEFORE-REACTIVATE"><a href="#PROCESS-BEFORE-REACTIVATE" class="headerlink" title="PROCESS_BEFORE_REACTIVATE"></a><a href="#PROCESS_BEFORE_REACTIVATE">PROCESS_BEFORE_REACTIVATE</a></h6><p><strong>流程复活前被触发</strong></p><p>将已执行完的流程再次激活使用时触发。</p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">InterruptListener</td></tr><tr><td align="left">接口</td><td align="left">InterruptListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">返回false，流程复活被阻止</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断</td></tr></tbody></table><p><strong>流程复活</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//复活一个已结束的流程实例时</span></span><br><span class="line">SDK.getProcessAPI().reactivate(processInst,targetActivityId,isClearHistory,optUser,targetUser,<span class="string">&quot;原因是要求重新执行&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.InterruptListener;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.util.UtilString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_PROCESS_BEFORE_REACTIVATE</span> <span class="keyword">extends</span> <span class="title">InterruptListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;测试用例&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        info(<span class="string">&quot;流程激活前事件被触发--&gt;&quot;</span> + ctx.getProcessInstance());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="PROCESS-AFTER-REACTIVATE"><a href="#PROCESS-AFTER-REACTIVATE" class="headerlink" title="PROCESS_AFTER_REACTIVATE"></a><a href="#PROCESS_AFTER_REACTIVATE">PROCESS_AFTER_REACTIVATE</a></h6><p><strong>流程复活后被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">ExecuteListener</td></tr><tr><td align="left">接口</td><td align="left">ExecuteListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">无</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断</td></tr></tbody></table><p><strong>流程复活</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//复活一个已结束的流程实例时</span></span><br><span class="line">SDK.getProcessAPI().reactivate(processInst,targetActivityId,isClearHistory,optUser,targetUser,<span class="string">&quot;原因是要求重新执行&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ExecuteListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_PROCESS_AFTER_REACTIVATE</span> <span class="keyword">extends</span> <span class="title">ExecuteListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;测试用例&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        info(<span class="string">&quot;流程激活后事件被触发--&gt;&quot;</span> + ctx.getProcessInstance());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="PROCESS-ACTIVITY-ADHOC-BRANCH"><a href="#PROCESS-ACTIVITY-ADHOC-BRANCH" class="headerlink" title="PROCESS_ACTIVITY_ADHOC_BRANCH"></a><a href="#PROCESS_ACTIVITY_ADHOC_BRANCH">PROCESS_ACTIVITY_ADHOC_BRANCH</a></h6><p><strong>该流程全局的ADHOC_BRANCH事件，见ACTIVITY_ADHOC_BRANCH说明</strong></p><p>业务场景：**.点击办理按钮校验通过后**</p><p><strong>流程办理</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建流程实例</span></span><br><span class="line">ProcessInstance processInst = SDK.getProcessAPI().createProcessInstance(processDefId, processBusinessKey,uid,createUserDeptId,createUserRoleId,title,vars);</span><br><span class="line"><span class="comment">//从默认的开始事件启动流程</span></span><br><span class="line">List&lt;TaskInstance&gt; tasks = SDK.getProcessAPI().start(processInst, <span class="keyword">null</span>).fetchActiveTasks();</span><br><span class="line"></span><br><span class="line"><span class="comment">//完成任务并向下推进时</span></span><br><span class="line">SDK.getTaskAPI().completeTask(tasks.get(<span class="number">0</span>), UserContext.fromUID(optUser), <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ValueListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_PROCESS_ACTIVITY_ADHOC_BRANCH</span> <span class="keyword">extends</span> <span class="title">ValueListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;测试用例&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 规则activityDefId:执行人</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ctx.getProcessElement().getName().equals(<span class="string">&quot;U1&quot;</span>)) &#123;</span><br><span class="line">            info(<span class="string">&quot;流程全局跳转事件被触发--&gt;&quot;</span> + ctx.getProcessInstance());</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;obj_c60c1e1780900001d21d59391c441b54:admin&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="PROCESS-FORM-BEFORE-LOAD"><a href="#PROCESS-FORM-BEFORE-LOAD" class="headerlink" title="PROCESS_FORM_BEFORE_LOAD"></a><a href="#PROCESS_FORM_BEFORE_LOAD">PROCESS_FORM_BEFORE_LOAD</a></h6><p><strong>该流程全局的FORM_BEFORE_LOAD事件</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">ExecuteListener</td></tr><tr><td align="left">接口</td><td align="left">ExecuteListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">无</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断</td></tr></tbody></table><p>如果该流程某个节点注册了FORM_BEFORE_LOAD事件，则对该节点来说，该PROCESS_FORM_BEFORE_LOAD事件失效。</p><p>参见<a href="https://docs.awspaas.com/reference-guide/aws-paas-process-listener-reference-guide/form_event/form_before_load.html">FORM_BEFORE_LOAD</a>事件</p><h6 id="PROCESS-FORM-GRID-FILTER"><a href="#PROCESS-FORM-GRID-FILTER" class="headerlink" title="PROCESS_FORM_GRID_FILTER"></a><a href="#PROCESS_FORM_GRID_FILTER">PROCESS_FORM_GRID_FILTER</a></h6><p><strong>该流程全局的FORM_GRID_FILTER事件</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">FormGridFilterListener</td></tr><tr><td align="left">接口</td><td align="left">ValueListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">无</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断</td></tr></tbody></table><p>如果该流程某个节点注册了FORM_GRID_FILTER事件，则对该节点来说，该PROCESS_FORM_GRID_FILTER事件失效。</p><p><strong>场景1：刷新有子表的表单时</strong></p><ul><li>过滤子表行记录</li><li>禁用子表行链接</li><li>禁止子表行删除</li><li>设置子表行的样式</li><li>重新设置子表字段展示数据</li></ul><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FormGridRowLookAndFeel <span class="title">acceptRowData</span><span class="params">(ProcessExecutionContext context, List&lt;BOItemModel&gt; boItemList, BO boData)</span> </span>&#123;</span><br><span class="line">    String tableName = context.getParameterOfString(ListenerConst.FORM_EVENT_PARAM_BONAME);</span><br><span class="line">    <span class="keyword">if</span> (tableName.equals(<span class="string">&quot;BO_ACT_PUTONGSUB1&quot;</span>)) &#123;</span><br><span class="line">        <span class="comment">//创建一个对象</span></span><br><span class="line">        FormGridRowLookAndFeel diyLookAndFeel = <span class="keyword">new</span> FormGridRowLookAndFeel();</span><br><span class="line">        String s3 = boData.getString(<span class="string">&quot;S3&quot;</span>);</span><br><span class="line">        String s4 = boData.getString(<span class="string">&quot;S4&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (s3 != <span class="keyword">null</span> &amp;&amp; s3.equals(<span class="string">&quot;50&quot;</span>)) &#123;</span><br><span class="line">            diyLookAndFeel.setLink(<span class="keyword">false</span>);<span class="comment">// 设置这行数据不展示链接</span></span><br><span class="line">            diyLookAndFeel.setRemove(<span class="keyword">false</span>);<span class="comment">// 设置这行数据不允许删除</span></span><br><span class="line">            diyLookAndFeel.setCellCSS(<span class="string">&quot;style=&#x27;background-color:yellow;font-color: ffffff;font-weight: bold;height: 125px&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s3 != <span class="keyword">null</span> &amp;&amp; s3.equals(<span class="string">&quot;55&quot;</span>)) &#123;</span><br><span class="line">            diyLookAndFeel.setDisplay(<span class="keyword">false</span>);<span class="comment">//不显示这条数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s4 != <span class="keyword">null</span> &amp;&amp; s4.equals(<span class="string">&quot;60&quot;</span>)) &#123;</span><br><span class="line">            boData.set(<span class="string">&quot;S1&quot;</span>, <span class="string">&quot;&lt;img src=&#x27;../commons/img/add1_16.png&#x27; border=0&gt;&quot;</span> + s4);<span class="comment">// 重新设定一个字段的值</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//特别说明：</span></span><br><span class="line">        <span class="comment">//如果控制字段子表的`编辑`和`明细`链接的文字的显示隐藏</span></span><br><span class="line">        <span class="comment">//可判断字段名是否是`字段子表`UI组件，然后进行赋值</span></span><br><span class="line">        <span class="comment">//赋值规则：`编辑|明细`</span></span><br><span class="line">        <span class="comment">//如果不显示`编辑`，将该部分留空，如果不显示`明细`，将该部分留空</span></span><br><span class="line">        <span class="comment">//如：`|明细`，`编辑|`，`|`</span></span><br><span class="line">        boData.set(<span class="string">&quot;字段子表字段名&quot;</span>, <span class="string">&quot;编辑|明细&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理好之后，将该对象返回</span></span><br><span class="line">        <span class="keyword">return</span> diyLookAndFeel;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;<span class="comment">//返回null按照原始数据展示子表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>场景2：指定子表排序</strong></p><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">orderByStatement</span><span class="params">(ProcessExecutionContext context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;field1 asc,field2 desc&quot;</span>;<span class="comment">//两种字段组合的排序</span></span><br><span class="line">    <span class="comment">//return &quot;field2 desc&quot;;//单个字段排序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>场景3：自定义子表的表头Html</strong></p><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造一个普通子表的表头Html片段，格式：&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;，支持多级表头，优先级比表单的自定义表头高</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ctx 流程引擎提供给监听器的上下文对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> formItemModel 子表项模型，可通过该模型获取到子表的BO模型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> displayPolicy 应用显示策略后的可见的字段列表，其中key为字段名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCustomeTableHeaderHtml</span><span class="params">(ProcessExecutionContext ctx, FormItemModel formItemModel, List&lt;String&gt; displayPolicy)</span></span>;</span><br><span class="line">    StringBuilder html = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    BOModel boModel = BOCache.getInstance().getModel(formItemModel.getBoModelId());<span class="comment">//获取BO模型</span></span><br><span class="line">    List&lt;BOItemModel&gt; boItemList = boModel.getBoItems();</span><br><span class="line">    <span class="keyword">if</span> (displayPolicy != <span class="keyword">null</span> &amp;&amp; displayPolicy.size() &gt; <span class="number">0</span>) &#123;<span class="comment">//判断子表可见字段的内容</span></span><br><span class="line">        html.append(<span class="string">&quot;&lt;tr&gt;&quot;</span>);</span><br><span class="line">        <span class="comment">//下面一行是序号列</span></span><br><span class="line">        html.append(<span class="string">&quot;&lt;th align=&#x27;center&#x27; width=&#x27;50&#x27; style=&#x27;max-width:50px;&#x27;&gt;&lt;I18N#序号&gt;&lt;/th&gt;&quot;</span>).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="comment">//下面四行是复选框列，注意，必须要按照以下格式，否则不能选择数据</span></span><br><span class="line">        String callback = <span class="string">&quot;callback=\&quot;&quot;</span> + Html.toCallJS(<span class="string">&quot;AWSCommonGrid.checkCallback&quot;</span>, <span class="keyword">new</span> Object[] &#123; Html.toJSObj(<span class="string">&quot;this&quot;</span>), formItemModel.getId() &#125;) + <span class="string">&quot;\&quot;&quot;</span>;</span><br><span class="line">        html.append(<span class="string">&quot;&lt;th align=&#x27;center&#x27; width=&#x27;50&#x27; style=&#x27;max-width:50px;&#x27;&gt;&lt;input type=&#x27;checkbox&#x27; class=&#x27;awsui-checkbox check-all&#x27; id=&#x27;check-all-&quot;</span>).append(formItemModel.getId()).append(<span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        html.append(<span class="string">&quot; &quot;</span>).append(callback);</span><br><span class="line">        html.append(<span class="string">&quot; group=&#x27;&quot;</span>).append(formItemModel.getId()).append(<span class="string">&quot;&#x27;/&gt;&lt;/th&gt;&quot;</span>).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String fieldName : displayPolicy) &#123;<span class="comment">//遍历子表的可见字段，最终形成一个Html片段</span></span><br><span class="line">            BOItemModel itemModel = BOCache.getInstance().getBOItemModelByBOName(boModel.getName(), fieldName);</span><br><span class="line">            html.append(<span class="string">&quot;&lt;th&gt;&quot;</span>).append(itemModel.getTitle()).append(<span class="string">&quot;&lt;/th&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        html.append(<span class="string">&quot;&lt;/tr&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> html.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>场景4：自定义AJAX子表的表头JSON</strong></p><p><strong>示例</strong></p><p>重写**public String getEditGridHeaderJSON(ProcessExecutionContext ctx, FormItemModel formItemModel, List displayPolicy)**方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造一个AJAX子表的表头JSON，格式：</span></span><br><span class="line"><span class="comment"> [&#x27;表字段&#x27;, &#123;</span></span><br><span class="line"><span class="comment">    title: &quot;表头&quot;,</span></span><br><span class="line"><span class="comment">    width: 250,</span></span><br><span class="line"><span class="comment">    align: &#x27;center&#x27;,</span></span><br><span class="line"><span class="comment">    colModel: [&#123;</span></span><br><span class="line"><span class="comment">        title: &quot;二级栏目1&quot;,</span></span><br><span class="line"><span class="comment">        align: &#x27;center&#x27;,</span></span><br><span class="line"><span class="comment">        colModel: [</span></span><br><span class="line"><span class="comment">            表字段1,</span></span><br><span class="line"><span class="comment">            表字段2,</span></span><br><span class="line"><span class="comment">            表字段3</span></span><br><span class="line"><span class="comment">        ]</span></span><br><span class="line"><span class="comment">    &#125;, &#123;</span></span><br><span class="line"><span class="comment">        title: &quot;二级栏目2&quot;,</span></span><br><span class="line"><span class="comment">        align: &#x27;center&#x27;,</span></span><br><span class="line"><span class="comment">        colModel: [</span></span><br><span class="line"><span class="comment">            表字段1,</span></span><br><span class="line"><span class="comment">            表字段2</span></span><br><span class="line"><span class="comment">        ]</span></span><br><span class="line"><span class="comment">    &#125;]</span></span><br><span class="line"><span class="comment">&#125;]，</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ctx 流程引擎提供给监听器的上下文对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> formItemModel 子表项模型，可通过该模型获取到子表的BO模型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> displayPolicy 应用显示策略后的可见的字段列表，其中key为字段名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEditGridHeaderJSON</span><span class="params">(ProcessExecutionContext ctx, FormItemModel formItemModel, List&lt;String&gt; displayPolicy)</span></span>;</span><br><span class="line">    StringBuilder headJson = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    BOModel boModel = BOCache.getInstance().getModel(formItemModel.getBoModelId());<span class="comment">//获取BO模型</span></span><br><span class="line">    List&lt;BOItemModel&gt; boItemList = boModel.getBoItems();</span><br><span class="line">    <span class="keyword">if</span> (displayPolicy != <span class="keyword">null</span> &amp;&amp; displayPolicy.size() &gt; <span class="number">0</span>) &#123;<span class="comment">//判断子表可见字段的内容</span></span><br><span class="line">    <span class="comment">/*    String headJson = &quot;[&#x27;ASSESSOBJECT&#x27;,&#x27;WEIGHT&#x27;,</span></span><br><span class="line"><span class="comment">                + &quot;&#123;&#x27;title&#x27;:&#x27;第一季度&#x27;,&#x27;align&#x27;:&#x27;center&#x27;,&#x27;colModel&#x27;:[&#x27;CONSTANT11&#x27;,&#x27;CONSTANT12&#x27;,&#x27;CONSTANT13&#x27;,&#x27;CONSTANT14&#x27;,&#x27;CONSTANT15&#x27;]&#125;,&quot;+</span></span><br><span class="line"><span class="comment">                  &quot;&#123;&#x27;title&#x27;:&#x27;第二季度&#x27;,&#x27;align&#x27;:&#x27;center&#x27;,&#x27;colModel&#x27;:[&#x27;CONSTANT21&#x27;,&#x27;CONSTANT22&#x27;,&#x27;CONSTANT23&#x27;]&#125;,&quot;+</span></span><br><span class="line"><span class="comment">                  &quot;&#123;&#x27;title&#x27;:&#x27;第三季度&#x27;,&#x27;align&#x27;:&#x27;center&#x27;,&#x27;colModel&#x27;:[&#x27;CONSTANT31&#x27;,&#x27;CONSTANT32&#x27;,&#x27;CONSTANT33&#x27;]&#125;,&quot;+</span></span><br><span class="line"><span class="comment">                  &quot;&#123;&#x27;title&#x27;:&#x27;第四季度&#x27;,&#x27;align&#x27;:&#x27;center&#x27;,&#x27;colModel&#x27;:[&#x27;CONSTANT41&#x27;,&#x27;CONSTANT42&#x27;,&#x27;CONSTANT43&#x27;]&#125;+</span></span><br><span class="line"><span class="comment">                   ]&quot;;*/</span></span><br><span class="line">        headJson.append(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        String season1 = <span class="string">&quot;&#123;&#x27;title&#x27;:&#x27;第一季度&#x27;,&#x27;align&#x27;:&#x27;center&#x27;,&#x27;colModel&#x27;:[&quot;</span>;<span class="comment">//表头 title 必填 ，align ，width 选填</span></span><br><span class="line">        String season2 = <span class="string">&quot;&#123;&#x27;title&#x27;:&#x27;第二季度&#x27;,&#x27;align&#x27;:&#x27;center&#x27;,&#x27;colModel&#x27;:[&quot;</span>;<span class="comment">//colModel是字段直接写字段名称</span></span><br><span class="line">        String season3 = <span class="string">&quot;&#123;&#x27;title&#x27;:&#x27;第三季度&#x27;,&#x27;align&#x27;:&#x27;center&#x27;,&#x27;colModel&#x27;:[&quot;</span>;</span><br><span class="line">        String season4 = <span class="string">&quot;&#123;&#x27;title&#x27;:&#x27;第四季度&#x27;,&#x27;align&#x27;:&#x27;center&#x27;,&#x27;colModel&#x27;:[&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (String fieldName : displayPolicy) &#123;<span class="comment">//遍历子表的可见字段，最终形成一个JSON片段</span></span><br><span class="line">            BOItemModel itemModel = BOCache.getInstance().getBOItemModelByBOName(boModel.getName(), fieldName);</span><br><span class="line">            <span class="keyword">if</span>(itemModel.getName().equals(<span class="string">&quot;ASSESSOBJECT&quot;</span>))&#123;</span><br><span class="line">               headJson.append(<span class="string">&quot;&#x27;&quot;</span>).append(itemModel.getName()).append(<span class="string">&quot;&#x27;,&quot;</span>);<span class="comment">//没有多级表头直接展示字段</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(itemModel.getName().contains(<span class="string">&quot;WEIGHT&quot;</span>))&#123;</span><br><span class="line">                 headJson.append(<span class="string">&quot;&#x27;&quot;</span>).append(itemModel.getName()).append(<span class="string">&quot;&#x27;,&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(itemModel.getName().contains(<span class="string">&quot;CONSTANT1&quot;</span>))&#123;</span><br><span class="line">                season1+=<span class="string">&quot;&#x27;&quot;</span>+itemModel.getName()+<span class="string">&quot;&#x27;&quot;</span>+<span class="string">&quot;,&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(itemModel.getName().contains(<span class="string">&quot;CONSTANT2&quot;</span>))&#123;</span><br><span class="line">                season2+=<span class="string">&quot;&#x27;&quot;</span>+itemModel.getName()+<span class="string">&quot;&#x27;&quot;</span>+<span class="string">&quot;,&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(itemModel.getName().contains(<span class="string">&quot;CONSTANT3&quot;</span>))&#123;</span><br><span class="line">                season3+=<span class="string">&quot;&#x27;&quot;</span>+itemModel.getName()+<span class="string">&quot;&#x27;&quot;</span>+<span class="string">&quot;,&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(itemModel.getName().contains(<span class="string">&quot;CONSTANT4&quot;</span>))&#123;</span><br><span class="line">                season4+=<span class="string">&quot;&#x27;&quot;</span>+itemModel.getName()+<span class="string">&quot;&#x27;&quot;</span>+<span class="string">&quot;,&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        season1 = season1.substring(<span class="number">0</span>,season1.length()-<span class="number">1</span>)+<span class="string">&quot;]&#125;,&quot;</span>;</span><br><span class="line">        season2 = season2.substring(<span class="number">0</span>,season2.length()-<span class="number">1</span>)+<span class="string">&quot;]&#125;,&quot;</span>;</span><br><span class="line">        season3 = season3.substring(<span class="number">0</span>,season3.length()-<span class="number">1</span>)+<span class="string">&quot;]&#125;,&quot;</span>;</span><br><span class="line">        season4 = season4.substring(<span class="number">0</span>,season4.length()-<span class="number">1</span>)+<span class="string">&quot;]&#125;&quot;</span>;</span><br><span class="line">        headJson.append(season1).append(season2).append(season3).append(season4).append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> headJson.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="PROCESS-BEFORE-RESTART"><a href="#PROCESS-BEFORE-RESTART" class="headerlink" title="PROCESS_BEFORE_RESTART"></a><a href="#PROCESS_BEFORE_RESTART">PROCESS_BEFORE_RESTART</a></h6><p><strong>流程重置前被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">InterruptListener</td></tr><tr><td align="left">接口</td><td align="left">InterruptListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">返回false，流程重置被阻止</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断</td></tr></tbody></table><p><strong>流程重置</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//重置流程实例</span></span><br><span class="line"> SDK.getProcessAPI().restart( processInst,  restartReason);</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.InterruptListener;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.util.UtilString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_PROCESS_BEFORE_DELETED</span> <span class="keyword">extends</span> <span class="title">InterruptListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;测试用例&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        info(<span class="string">&quot;流程重置前事件被触发--&gt;&quot;</span> + ctx.getProcessInstance());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="PROCESS-AFTER-RESTART"><a href="#PROCESS-AFTER-RESTART" class="headerlink" title="PROCESS_AFTER_RESTART"></a><a href="#PROCESS_AFTER_RESTART">PROCESS_AFTER_RESTART</a></h6><p><strong>流程重置后被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">ExecuteListener</td></tr><tr><td align="left">接口</td><td align="left">ExecuteListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">无</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断</td></tr></tbody></table><p><strong>流程重置</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//重置流程实例</span></span><br><span class="line"> SDK.getProcessAPI().restart( processInst,  restartReason);</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.process;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ExecuteListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_PROCESS_AFTER_CANCEL</span> <span class="keyword">extends</span> <span class="title">ExecuteListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;测试用例&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        info(<span class="string">&quot;流程重置后事件被触发--&gt;&quot;</span> + ctx.getProcessInstance());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6、节点通用事件"><a href="#6、节点通用事件" class="headerlink" title="6、节点通用事件"></a>6、节点通用事件</h5><h6 id="TASK-BEFORE-COMPLETE"><a href="#TASK-BEFORE-COMPLETE" class="headerlink" title="TASK_BEFORE_COMPLETE"></a><a href="#TASK_BEFORE_COMPLETE">TASK_BEFORE_COMPLETE</a></h6><p><strong>任务完成（结束）前被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">InterruptListener</td></tr><tr><td align="left">接口</td><td align="left">InterruptListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">返回false，任务完成被阻止</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断 -其中抛出BPMNError异常时，该节点定义的错误边界事件将被捕获， 若未捕获且该流程为子流程，可被父流程CallActivity定义的 边界错误事件捕获。如未定义，业务错误信息包装成结果返回</td></tr></tbody></table><p><strong>完成任务往下推</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//完成任务并向下推进时</span></span><br><span class="line">SDK.getTaskAPI().completeTask(taskInst, UserContext.fromUID(optUser), <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.usertask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.InterruptListener;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.InterruptListenerInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_TASK_BEFORE_COMPLETE</span> <span class="keyword">extends</span> <span class="title">InterruptListener</span> <span class="keyword">implements</span> <span class="title">InterruptListenerInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        info(<span class="string">&quot;任务结束前可以阻止被触发--&gt;&quot;</span> + ctx.getTaskInstance());</span><br><span class="line">        <span class="comment">// throw new BPMNError(&quot;UCode01&quot;, &quot;User biz error&quot;);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="TASK-AFTER-COMPLETE"><a href="#TASK-AFTER-COMPLETE" class="headerlink" title="TASK_AFTER_COMPLETE"></a><a href="#TASK_AFTER_COMPLETE">TASK_AFTER_COMPLETE</a></h6><p><strong>任务完成（结束）后被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">ExecuteListener</td></tr><tr><td align="left">接口</td><td align="left">ExecuteListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">无</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断 -其中抛出BPMNError异常时，该节点定义的错误边界事件将被捕获， 若未捕获且该流程为子流程，可被父流程CallActivity定义的 边界错误事件捕获。如未定义，业务错误信息包装成结果返回</td></tr></tbody></table><p><strong>完成任务并向下推进时</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//完成任务并向下推进时</span></span><br><span class="line">SDK.getTaskAPI().completeTask(taskInst, UserContext.fromUID(optUser), <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.usertask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ExecuteListener;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ExecuteListenerInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_TASK_AFTER_COMPLETE</span> <span class="keyword">extends</span> <span class="title">ExecuteListener</span> <span class="keyword">implements</span> <span class="title">ExecuteListenerInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        info(<span class="string">&quot;任务结束后可以补偿被触发--&gt;&quot;</span> + ctx.getTaskInstance());</span><br><span class="line">        <span class="comment">// throw new BPMNError(&quot;UCode02&quot;, &quot;User biz error&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="TASK-SUSPEND"><a href="#TASK-SUSPEND" class="headerlink" title="TASK_SUSPEND"></a><a href="#TASK_SUSPEND">TASK_SUSPEND</a></h6><p><strong>任务挂起后被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">ExecuteListener</td></tr><tr><td align="left">接口</td><td align="left">ExecuteListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">无</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断</td></tr></tbody></table><p><strong>挂起任务</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//挂起任务</span></span><br><span class="line">SDK.getTaskAPI().suspend(taskInst);</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.usertask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ExecuteListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_TASK_SUSPEND</span> <span class="keyword">extends</span> <span class="title">ExecuteListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;测试用例&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        info(<span class="string">&quot;任务挂起后事件被触发--&gt;&quot;</span> + ctx.getTaskInstance());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="TASK-RESUME"><a href="#TASK-RESUME" class="headerlink" title="TASK_RESUME"></a><a href="#TASK_RESUME">TASK_RESUME</a></h6><p><strong>任务恢复后被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">ExecuteListener</td></tr><tr><td align="left">接口</td><td align="left">ExecuteListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">无</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断</td></tr></tbody></table><p><strong>恢复任务</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//恢复任务</span></span><br><span class="line">SDK.getTaskAPI().resume(taskInst);</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.usertask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ExecuteListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_TASK_RESUME</span> <span class="keyword">extends</span> <span class="title">ExecuteListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;测试用例&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        info(<span class="string">&quot;任务恢复后事件被触发--&gt;&quot;</span> + ctx.getTaskInstance());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="ACTIVITY-BEFORE-LEAVE"><a href="#ACTIVITY-BEFORE-LEAVE" class="headerlink" title="ACTIVITY_BEFORE_LEAVE"></a><a href="#ACTIVITY_BEFORE_LEAVE">ACTIVITY_BEFORE_LEAVE</a></h6><p><strong>节点离开前被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">InterruptListener</td></tr><tr><td align="left">接口</td><td align="left">InterruptListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">返回false，节点离开被阻止，该分支被中断于此</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断 -其中抛出BPMNError异常时，该节点定义的错误边界事件将被捕获， 若未捕获且该流程为子流程，可被父流程CallActivity定义的 边界错误事件捕获。如未定义，业务错误信息包装成结果返回</td></tr></tbody></table><p><strong>完成任务并向下推进</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该节点所有任务都将结束，完成任务并向下推进时</span></span><br><span class="line">SDK.getTaskAPI().completeTask(taskInst, UserContext.fromUID(optUser), <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.usertask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.InterruptListener;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.InterruptListenerInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_ACTIVITY_BEFORE_LEAVE</span> <span class="keyword">extends</span> <span class="title">InterruptListener</span> <span class="keyword">implements</span> <span class="title">InterruptListenerInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        info(<span class="string">&quot;节点离开前可以阻止被触发--&gt;&quot;</span> + ctx.getTaskInstance());</span><br><span class="line">        <span class="comment">// throw new BPMNError(&quot;UCode03&quot;, &quot;User biz error&quot;);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="ACTIVITY-AFTER-LEAVE"><a href="#ACTIVITY-AFTER-LEAVE" class="headerlink" title="ACTIVITY_AFTER_LEAVE"></a><a href="#ACTIVITY_AFTER_LEAVE">ACTIVITY_AFTER_LEAVE</a></h6><p><strong>节点离开后被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">ExecuteListener</td></tr><tr><td align="left">接口</td><td align="left">ExecuteListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">无</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断 -其中抛出BPMNError异常时，该节点定义的错误边界事件将被捕获， 若未捕获且该流程为子流程，可被父流程CallActivity定义的 边界错误事件捕获。如未定义，业务错误信息包装成结果返回</td></tr></tbody></table><p><strong>完成任务并向下推进</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该节点所有任务都将结束，完成任务并向下推进时</span></span><br><span class="line">SDK.getTaskAPI().completeTask(taskInst, UserContext.fromUID(optUser), <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.usertask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ExecuteListener;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ExecuteListenerInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_ACTIVITY_AFTER_LEAVE</span> <span class="keyword">extends</span> <span class="title">ExecuteListener</span> <span class="keyword">implements</span> <span class="title">ExecuteListenerInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        info(<span class="string">&quot;节点结束后可以补偿被触发--&gt;&quot;</span> + ctx.getTaskInstance());</span><br><span class="line">        <span class="comment">// throw new BPMNError(&quot;UCode04&quot;, &quot;User biz error&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7、人工任务专有事件"><a href="#7、人工任务专有事件" class="headerlink" title="7、人工任务专有事件"></a>7、人工任务专有事件</h5><h6 id="ACTIVITY-ADHOC-BRANCH"><a href="#ACTIVITY-ADHOC-BRANCH" class="headerlink" title="ACTIVITY_ADHOC_BRANCH"></a><a href="#ACTIVITY_ADHOC_BRANCH">ACTIVITY_ADHOC_BRANCH</a></h6><p><strong>程序指定后继路线和参与者，上一节点准备离开时触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">ValueListener</td></tr><tr><td align="left">接口</td><td align="left">ValueListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">-一个格式化的字符串值，如果返回null不干涉 - 格式：节点定义Id:参与者账户 -如果指定节点定义Id，后继路线跳转到该节点 -如果指定参与者账户（多个空格隔开），后继节点的参与者以该值为准</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断 -其中抛出BPMNError异常时，该节点定义的错误边界事件将被捕获， 若未捕获且该流程为子流程，可被父流程CallActivity定义的 边界错误事件捕获。如未定义，业务错误信息包装成结果返回</td></tr></tbody></table><p><strong>完成任务并向下推进</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//完成任务并向下推进时</span></span><br><span class="line">SDK.getTaskAPI().completeTask(tasks.get(<span class="number">0</span>), UserContext.fromUID(optUser), <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.usertask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ValueListener;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ValueListenerInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_ACTIVITY_ADHOC_BRANCH</span> <span class="keyword">extends</span> <span class="title">ValueListener</span> <span class="keyword">implements</span> <span class="title">ValueListenerInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        info(<span class="string">&quot;程序指定后继路线和参与者--&gt;&quot;</span> + ctx.getTaskInstance());</span><br><span class="line">        <span class="keyword">if</span> (ctx.getProcessElement().getName().equals(<span class="string">&quot;U1&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;obj_c649377f56b000012274a6807f401783:admin&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="ACTIVITY-CONFIRM-PARTICIPANTS"><a href="#ACTIVITY-CONFIRM-PARTICIPANTS" class="headerlink" title="ACTIVITY_CONFIRM_PARTICIPANTS"></a><a href="#ACTIVITY_CONFIRM_PARTICIPANTS">ACTIVITY_CONFIRM_PARTICIPANTS</a></h6><p><strong>节点就绪参与者即将产生任务</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">ValueListener</td></tr><tr><td align="left">接口</td><td align="left">ValueListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">- 一个格式化的字符串值，如果返回null不干涉 - 格式：参与者账户，开发者可以在ProcessExecutionContext上下文中调用 getParameterOfString(“$PARTICIPANTS”)获得引擎通过路由或ACTIVITY_ADHOC_BRANCH事件获取的参与者账户（多个空格隔开） -如果多个账户，将按该节点的多例模式进行处理</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断 -其中抛出BPMNError异常时，该节点定义的错误边界事件将被捕获， 若未捕获且该流程为子流程，可被父流程CallActivity定义的 边界错误事件捕获。如未定义，业务错误信息包装成结果返回</td></tr></tbody></table><p>业务场景：<strong>获得下个执行任务路径时</strong></p><p><strong>完成任务并向下推进时</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//完成任务并向下推进时</span></span><br><span class="line">SDK.getTaskAPI().completeTask(tasks.get(<span class="number">0</span>), UserContext.fromUID(optUser), <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.usertask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ValueListener;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ValueListenerInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_ACTIVITY_CONFIRM_PARTICIPANTS</span> <span class="keyword">extends</span> <span class="title">ValueListener</span> <span class="keyword">implements</span> <span class="title">ValueListenerInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        info(<span class="string">&quot;节点就绪参与者即将产生任务被触发&quot;</span>);</span><br><span class="line">        String participants = ctx.getParameterOfString(<span class="string">&quot;$PARTICIPANTS&quot;</span>);</span><br><span class="line">        info(<span class="string">&quot;即将给[&quot;</span> + participants + <span class="string">&quot;]创建人工任务&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;admin admin admin&quot;</span>;<span class="comment">// 不干预当前的委派过程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="TASK-BEFORE-UNDO"><a href="#TASK-BEFORE-UNDO" class="headerlink" title="TASK_BEFORE_UNDO"></a><a href="#TASK_BEFORE_UNDO">TASK_BEFORE_UNDO</a></h6><p><strong>任务收回前被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">InterruptListener</td></tr><tr><td align="left">接口</td><td align="left">InterruptListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">返回false，任务收回被阻止</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回</td></tr></tbody></table><p><strong>收回任务</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//收回任务</span></span><br><span class="line">SDK.getTaskAPI().undoTask(taskInstId, uid, undoReason);</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.usertask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.InterruptListener;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.InterruptListenerInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_TASK_BEFORE_UNDO</span> <span class="keyword">extends</span> <span class="title">InterruptListener</span> <span class="keyword">implements</span> <span class="title">InterruptListenerInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        info(<span class="string">&quot;任务收回前可以阻止被触发--&gt;&quot;</span> + ctx.getTaskInstance());</span><br><span class="line">        <span class="comment">// throw new BPMNError(&quot;UCode01&quot;, &quot;User biz error&quot;);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="TASK-AFTER-UNDO"><a href="#TASK-AFTER-UNDO" class="headerlink" title="TASK_AFTER_UNDO"></a><a href="#TASK_AFTER_UNDO">TASK_AFTER_UNDO</a></h6><p><strong>任务收回后被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">ExecuteListener</td></tr><tr><td align="left">接口</td><td align="left">ExecuteListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">无</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回</td></tr></tbody></table><p><strong>收回任务</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.usertask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ExecuteListener;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ExecuteListenerInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_TASK_AFTER_UNDO</span> <span class="keyword">extends</span> <span class="title">ExecuteListener</span> <span class="keyword">implements</span> <span class="title">ExecuteListenerInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        info(<span class="string">&quot;任务收回后可以补偿被触发--&gt;&quot;</span> + ctx.getTaskInstance());</span><br><span class="line">        <span class="comment">// throw new BPMNError(&quot;UCode02&quot;, &quot;User biz error&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="TASK-AFTER-CREATED"><a href="#TASK-AFTER-CREATED" class="headerlink" title="TASK_AFTER_CREATED"></a><a href="#TASK_AFTER_CREATED">TASK_AFTER_CREATED</a></h6><p><strong>任务创建后被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">ExecuteListener</td></tr><tr><td align="left">接口</td><td align="left">ExecuteListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">无</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回</td></tr></tbody></table><p><strong>创建任务</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建任务</span></span><br><span class="line">SDK.getTaskAPI().createUserTaskInstance(processInst, parentTaskInstModel, userContext,targetActivityDefId,participant,title);</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.usertask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ExecuteListener;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ExecuteListenerInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_TASK_AFTER_CREATED</span> <span class="keyword">extends</span> <span class="title">ExecuteListener</span> <span class="keyword">implements</span> <span class="title">ExecuteListenerInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        info(<span class="string">&quot;任务创建后可以补偿被触发--&gt;&quot;</span> + ctx.getTaskInstance());</span><br><span class="line">        <span class="comment">// throw new BPMNError(&quot;UCode02&quot;, &quot;User biz error&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8、子流程任务专有事件"><a href="#8、子流程任务专有事件" class="headerlink" title="8、子流程任务专有事件"></a>8、子流程任务专有事件</h5><h6 id="CALLACTIVITY-BEFORE-SUBPROCESS-START"><a href="#CALLACTIVITY-BEFORE-SUBPROCESS-START" class="headerlink" title="CALLACTIVITY_BEFORE_SUBPROCESS_START"></a><a href="#CALLACTIVITY_BEFORE_SUBPROCESS_START">CALLACTIVITY_BEFORE_SUBPROCESS_START</a></h6><p><strong>子流程实例创建后启动前触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">ExecuteListener</td></tr><tr><td align="left">接口</td><td align="left">ExecuteListenerInterface</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断 -其中抛出BPMNError异常时，该节点定义的错误边界事件将被捕获， 若未捕获且该流程为子流程，可被父流程CallActivity定义的 边界错误事件捕获。如未定义，业务错误信息包装成结果返回</td></tr><tr><td align="left">参数</td><td align="left">CallActivityDefinitionConst.PARAM_CALLACTIVITY_CONTEXT</td></tr></tbody></table><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.callactivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.constant.CallActivityDefinitionConst;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.TaskBehaviorContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ExecuteListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_CALLACTIVITY_BEFORE_SUBPROCESS_START</span> <span class="keyword">extends</span> <span class="title">ExecuteListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 父流程实例对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Parent ProcessInstance=&quot;</span> + ctx.getProcessInstance());</span><br><span class="line">        <span class="comment">// 子流程实例上下文，此阶段子流程实例已创建，未开始流程（无任务实例）</span></span><br><span class="line">        TaskBehaviorContext subProcessCtx = (TaskBehaviorContext) ctx.getParameter(CallActivityDefinitionConst.PARAM_CALLACTIVITY_CONTEXT);</span><br><span class="line">        <span class="comment">// 子流程实例</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Sub ProcessInstance=&quot;</span> + subProcessCtx.getProcessInstance());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="CALLACTIVITY-AFTER-SUBPROCESS-COMPLETE"><a href="#CALLACTIVITY-AFTER-SUBPROCESS-COMPLETE" class="headerlink" title="CALLACTIVITY_AFTER_SUBPROCESS_COMPLETE"></a><a href="#CALLACTIVITY_AFTER_SUBPROCESS_COMPLETE">CALLACTIVITY_AFTER_SUBPROCESS_COMPLETE</a></h6><p><strong>子流程实例结束后触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">ExecuteListener</td></tr><tr><td align="left">接口</td><td align="left">ExecuteListenerInterface</td></tr><tr><td align="left">异常</td><td align="left">抛出异常时，如果该子流程实例是单例或多例的最后一个子流程实例，流程将中断在父流程的<code>子流程任务</code></td></tr><tr><td align="left">参数</td><td align="left">CallActivityDefinitionConst.PARAM_CALLACTIVITY_CONTEXT</td></tr></tbody></table><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.callactivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.constant.CallActivityDefinitionConst;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.TaskBehaviorContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ExecuteListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_CALLACTIVITY_AFTER_SUBPROCESS_COMPLETE</span> <span class="keyword">extends</span> <span class="title">ExecuteListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 父流程实例对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Parent ProcessInstance=&quot;</span> + ctx.getProcessInstance());</span><br><span class="line">        <span class="comment">// 子流程实例上下文</span></span><br><span class="line">        TaskBehaviorContext subProcessCtx = (TaskBehaviorContext) ctx.getParameter(CallActivityDefinitionConst.PARAM_CALLACTIVITY_CONTEXT);</span><br><span class="line">        <span class="comment">// 子流程实例</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Sub ProcessInstance=&quot;</span> + subProcessCtx.getProcessInstance());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9、流程表单事件"><a href="#9、流程表单事件" class="headerlink" title="9、流程表单事件"></a>9、流程表单事件</h5><h6 id="FORM-COMPLETE-VALIDATE"><a href="#FORM-COMPLETE-VALIDATE" class="headerlink" title="FORM_COMPLETE_VALIDATE"></a><a href="#FORM_COMPLETE_VALIDATE">FORM_COMPLETE_VALIDATE</a></h6><p><strong>流程表单办理前校验,流程办理前被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">InterruptListener</td></tr><tr><td align="left">接口</td><td align="left">InterruptListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">返回false，流程办理被阻止</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断 -其中抛出BPMNError异常时，该节点定义的错误边界事件将被捕获， 若未捕获且该流程为子流程，可被父流程CallActivity定义的 边界错误事件捕获。如未定义，业务错误信息包装成结果返回</td></tr></tbody></table><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.api.local.process.listener.usertask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.InterruptListener;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.InterruptListenerInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_FORM_COMPLETE_VALIDATE</span> <span class="keyword">extends</span> <span class="title">InterruptListener</span> <span class="keyword">implements</span> <span class="title">InterruptListenerInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//参数获取</span></span><br><span class="line">        <span class="comment">//注意：除特殊说明外，下列参数仅在该事件中场景有效</span></span><br><span class="line">        <span class="comment">//记录ID</span></span><br><span class="line">        String boId = ctx.getParameterOfString(ListenerConst.FORM_EVENT_PARAM_BOID);</span><br><span class="line">        <span class="comment">//表单ID</span></span><br><span class="line">        String formId = ctx.getParameterOfString(ListenerConst.FORM_EVENT_PARAM_FORMID);</span><br><span class="line">        <span class="comment">//BO表名</span></span><br><span class="line">        String boName = ctx.getParameterOfString(ListenerConst.FORM_EVENT_PARAM_BONAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//业务异常代码（自定义）</span></span><br><span class="line">        <span class="comment">//业务异常信息（自定义）</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BPMNError(<span class="string">&quot;0312&quot;</span>,<span class="string">&quot;订单尚未审核，不能进行支付操作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="FORM-TOOLBAR-BUILD"><a href="#FORM-TOOLBAR-BUILD" class="headerlink" title="FORM_TOOLBAR_BUILD"></a><a href="#FORM_TOOLBAR_BUILD">FORM_TOOLBAR_BUILD</a></h6><p><strong>表单工具栏构建</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">FormToolbarBuilderListener</td></tr><tr><td align="left">接口</td><td align="left">ValueListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">List<ButtonModel></td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断</td></tr></tbody></table><p><strong>按钮执行动作</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">ValueListener</td></tr><tr><td align="left">接口</td><td align="left">ValueListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">String</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断</td></tr></tbody></table><h6 id="FORM-BEFORE-LOAD"><a href="#FORM-BEFORE-LOAD" class="headerlink" title="FORM_BEFORE_LOAD"></a><a href="#FORM_BEFORE_LOAD">FORM_BEFORE_LOAD</a></h6><p><strong>表单构建前被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">ExecuteListener</td></tr><tr><td align="left">接口</td><td align="left">ExecuteListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">无</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断</td></tr></tbody></table><h6 id="FORM-AFTER-LOAD"><a href="#FORM-AFTER-LOAD" class="headerlink" title="FORM_AFTER_LOAD"></a><a href="#FORM_AFTER_LOAD">FORM_AFTER_LOAD</a></h6><p><strong>表单构建后被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">ExecuteListener</td></tr><tr><td align="left">接口</td><td align="left">ExecuteListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">无</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断</td></tr></tbody></table><h6 id="FORM-BEFORE-SAVE"><a href="#FORM-BEFORE-SAVE" class="headerlink" title="FORM_BEFORE_SAVE"></a><a href="#FORM_BEFORE_SAVE">FORM_BEFORE_SAVE</a></h6><p><strong>表单(或子表)保存前被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">InterruptListener</td></tr><tr><td align="left">接口</td><td align="left">InterruptListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">返回false，表单保存被阻止</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断</td></tr></tbody></table><p>通常，该事件用于在保存前的最后一次校验，可以用来阻止保存</p><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.form.event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bo.engine.BO;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.InterruptListener;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.sdk.local.SDK;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFormBeforeSave</span> <span class="keyword">extends</span> <span class="title">InterruptListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;表单保存前的事件测试&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Actionsoft&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1.0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext param)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//参数获取</span></span><br><span class="line">        <span class="comment">//注意：除特殊说明外，下列参数仅在该事件中场景有效</span></span><br><span class="line">        <span class="comment">//记录ID</span></span><br><span class="line">        String boId = param.getParameterOfString(ListenerConst.FORM_EVENT_PARAM_BOID);</span><br><span class="line">        <span class="comment">//表单ID</span></span><br><span class="line">        String formId = param.getParameterOfString(ListenerConst.FORM_EVENT_PARAM_FORMID);</span><br><span class="line">        <span class="comment">//BO表名</span></span><br><span class="line">        String boName = param.getParameterOfString(ListenerConst.FORM_EVENT_PARAM_BONAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存前的表单数据，注意：该参数针对不同场景获取内容会有所不同</span></span><br><span class="line">        <span class="comment">// 主表中的保存场景获取主表数据；普通子表页面的保存场景获取的是该条子表的数据；如果需要获得其他数据请使用BOQueryAPI获取</span></span><br><span class="line">        BO formData = (BO) param.getParameter(ListenerConst.FORM_EVENT_PARAM_FORMDATA);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取Ajax子表的数据，由于Ajax子表的数据会同主表保存动作一起触发，需要使用该参数获取</span></span><br><span class="line">        <span class="comment">// 在Ajax子表的工具栏上的“保存”动作和主表的“保存”动作中有效</span></span><br><span class="line">        <span class="comment">// 注意：该数据并不是从数据库中获取，获取的数据取决于表单上对Ajax子表新增的数据与修改的数据的和</span></span><br><span class="line">        List&lt;BO&gt; gridData = (List) param.getParameter(ListenerConst.FORM_EVENT_PARAM_GRIDDATA);</span><br><span class="line">        <span class="comment">//遍历子表的数据</span></span><br><span class="line">        <span class="keyword">for</span> (BO rowData : gridData) &#123;</span><br><span class="line">            <span class="comment">//下面一行示例代码，可以获取Ajax子表的每行记录的新建状态</span></span><br><span class="line">            <span class="keyword">boolean</span> rowDataIsCreate = Boolean.parseBoolean(rowData.getString(<span class="string">&quot;isCreate&quot;</span>));<span class="comment">//注意：isCreate并不是BO的一个字段，该字段是有接口上层赋值的</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 该记录是否新建的状态，由于机制调整，BO对象中的ID是不为空的，不能通过ID判断记录是否处于新建状态还是修改状态</span></span><br><span class="line">        <span class="comment">//注意：该参数仅适用保存前（后）事件中，该参数仅能获取主表的是否新建状态</span></span><br><span class="line">        <span class="keyword">boolean</span> isCreate = param.getParameterOfBoolean(ListenerConst.FORM_EVENT_PARAM_ISCREATE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//该记录是否通过复制功能创建，用于普通子表的复制时判断该状态</span></span><br><span class="line">        <span class="comment">//注意：该参数仅适用保存前（后）事件中</span></span><br><span class="line">        <span class="keyword">boolean</span> isCopy = param.getParameterOfBoolean(ListenerConst.FORM_EVENT_PARAM_ISCOPY);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//返回true可以正常保存表单</span></span><br><span class="line">        <span class="comment">//return false;//可阻止表单保存</span></span><br><span class="line">        <span class="comment">//或者直接抛出BPMNErr异常</span></span><br><span class="line">        <span class="comment">//throw new BPMNError(&quot;0313&quot;,&quot;数据不完整，不能进行保存操作&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="FORM-AFTER-SAVE"><a href="#FORM-AFTER-SAVE" class="headerlink" title="FORM_AFTER_SAVE"></a><a href="#FORM_AFTER_SAVE">FORM_AFTER_SAVE</a></h6><p><strong>表单(或子表)保存后被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">ExecuteListener</td></tr><tr><td align="left">接口</td><td align="left">ExecuteListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">无</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断</td></tr></tbody></table><p>通常，该事件用于补偿处理一些业务逻辑</p><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.form.event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bo.engine.BO;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ExecuteListener;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.sdk.local.SDK;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFormAfterSave</span> <span class="keyword">extends</span> <span class="title">ExecuteListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;表单保存后的事件测试&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Actionsoft&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1.0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext param)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//参数获取</span></span><br><span class="line">        <span class="comment">//注意：除特殊说明外，下列参数仅在该事件中场景有效</span></span><br><span class="line">        <span class="comment">//记录ID</span></span><br><span class="line">        String boId = param.getParameterOfString(ListenerConst.FORM_EVENT_PARAM_BOID);</span><br><span class="line">        <span class="comment">//表单ID</span></span><br><span class="line">        String formId = param.getParameterOfString(ListenerConst.FORM_EVENT_PARAM_FORMID);</span><br><span class="line">        <span class="comment">//BO表名</span></span><br><span class="line">        String boName = param.getParameterOfString(ListenerConst.FORM_EVENT_PARAM_BONAME);</span><br><span class="line">        <span class="comment">// 保存前的表单数据，注意：该参数针对不同场景获取内容会有所不同</span></span><br><span class="line">        <span class="comment">// 主表场景获取主表数据；普通子表页面的场景获取的是该条子表的数据；获取其他的数据请使用BOQueryAPI获取</span></span><br><span class="line">        <span class="comment">// 注意：这个数据是在保存前放入的，经过保存之后，这些数据和数据库中的数据是一致的</span></span><br><span class="line">        BO formData = (BO) param.getParameter(ListenerConst.FORM_EVENT_PARAM_FORMDATA);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取Ajax子表在保存时的数据，由于Ajax子表的数据会同主表保存动作一起触发，需要使用该参数获取</span></span><br><span class="line">        <span class="comment">// 在Ajax子表的工具栏上的“保存”动作和主表的“保存”动作中有效</span></span><br><span class="line">        <span class="comment">// 注意：这个数据是在保存前放入的，经过保存之后，这些数据和数据库中的数据是一致的</span></span><br><span class="line">        List&lt;BO&gt; gridData = (List) param.getParameter(ListenerConst.FORM_EVENT_PARAM_GRIDDATA);</span><br><span class="line">        <span class="comment">// 该记录是否新建的状态，由于机制调整，BO对象中的ID是不为空的，不能通过ID判断记录是否处于新建状态还是修改状态</span></span><br><span class="line">        <span class="comment">//注意：该参数仅适用保存前（后）事件中</span></span><br><span class="line">        <span class="keyword">boolean</span> isCreate = param.getParameterOfBoolean(ListenerConst.FORM_EVENT_PARAM_ISCREATE);</span><br><span class="line">        <span class="comment">//该记录是否通过复制功能创建，用于普通子表的复制时判断该状态</span></span><br><span class="line">        <span class="comment">//注意：该参数仅适用保存前（后）事件中</span></span><br><span class="line">        <span class="keyword">boolean</span> isCopy = param.getParameterOfBoolean(ListenerConst.FORM_EVENT_PARAM_ISCOPY);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注意</span></span><br><span class="line">        <span class="comment">//当该事件处于子表导入后被触发的场景时仅能获取到“ListenerConst.FORM_EVENT_PARAM_BONAME”和“ListenerConst.FORM_EVENT_PARAM_FORMID”</span></span><br><span class="line">        <span class="comment">//参数“ListenerConst.FORM_EVENT_PARAM_ISCREATE”E和“ListenerConst.FORM_EVENT_PARAM_ISCOPY”在该场景不适用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="FORM-BEFORE-REMOVE"><a href="#FORM-BEFORE-REMOVE" class="headerlink" title="FORM_BEFORE_REMOVE"></a><a href="#FORM_BEFORE_REMOVE">FORM_BEFORE_REMOVE</a></h6><p><strong>表单子表记录删除前被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">InterruptListener</td></tr><tr><td align="left">接口</td><td align="left">InterruptListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">返回false，子表删除数据动作被阻止</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断</td></tr></tbody></table><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.form.event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bo.engine.BO;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.InterruptListener;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.sdk.local.SDK;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFormBeforeRemove</span> <span class="keyword">extends</span> <span class="title">InterruptListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;表单子表记录删除前的事件测试&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Actionsoft&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1.0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext param)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//参数获取</span></span><br><span class="line">        <span class="comment">//注意：除特殊说明外，下列参数仅在该事件中场景有效</span></span><br><span class="line">        <span class="comment">//子表单项ID</span></span><br><span class="line">        String formItemId = param.getParameterOfString(ListenerConst.FORM_EVENT_PARAM_FORMID);</span><br><span class="line">        <span class="comment">//BO表名</span></span><br><span class="line">        String boName = param.getParameterOfString(ListenerConst.FORM_EVENT_PARAM_BONAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//即将被删除的记录，可用与校验该数据是否存在依赖关系，是否可被删除等</span></span><br><span class="line">        BO bo = (BO) param.getParameter(ListenerConst.FORM_EVENT_PARAM_REMOVED_BO);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注意：由于使用了事务，操作数据库需要使用如下方式获取的Connection连接</span></span><br><span class="line">        <span class="comment">//该参数仅在表单子表记录删除前（后）有效</span></span><br><span class="line">        Connection conn = (Connection) param.getParameter(ListenerConst.FORM_EVENT_PARAM_CONNECTION);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//返回true可以删除记录</span></span><br><span class="line">        <span class="comment">//return false;//可阻止记录删除</span></span><br><span class="line">        <span class="comment">//或者直接抛出BPMNErr异常</span></span><br><span class="line">        <span class="comment">//throw new BPMNError(&quot;0314&quot;,&quot;数据被使用，不能进行删除操作&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="FORM-AFTER-REMOVE"><a href="#FORM-AFTER-REMOVE" class="headerlink" title="FORM_AFTER_REMOVE"></a><a href="#FORM_AFTER_REMOVE">FORM_AFTER_REMOVE</a></h6><p><strong>表单子表记录删除后被触发</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">ExecuteListener</td></tr><tr><td align="left">接口</td><td align="left">ExecuteListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">无</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断</td></tr></tbody></table><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.form.event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bo.engine.BO;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ExecuteListener;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.sdk.local.SDK;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFormAfterRemove</span> <span class="keyword">extends</span> <span class="title">ExecuteListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;表单子表记录删除后的事件测试&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Actionsoft&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1.0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ProcessExecutionContext param)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//参数获取</span></span><br><span class="line">        <span class="comment">//注意：除特殊说明外，下列参数仅在该事件中场景有效</span></span><br><span class="line">        <span class="comment">//子表单项ID</span></span><br><span class="line">        String formItemId = param.getParameterOfString(ListenerConst.FORM_EVENT_PARAM_FORMID);</span><br><span class="line">        <span class="comment">//BO表名</span></span><br><span class="line">        String boName = param.getParameterOfString(ListenerConst.FORM_EVENT_PARAM_BONAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//被删除的记录，可读取该信息，进行删除后的补偿操作</span></span><br><span class="line">        BO bo = (BO) param.getParameter(ListenerConst.FORM_EVENT_PARAM_REMOVED_BO);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注意：由于使用了事务，操作数据库需要使用如下方式获取的Connection连接</span></span><br><span class="line">        <span class="comment">//该参数仅在表单子表记录删除前（后）有效</span></span><br><span class="line">        Connection conn = (Connection) param.getParameter(ListenerConst.FORM_EVENT_PARAM_CONNECTION);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行删除后的业务补偿</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="FORM-GRID-FILTER"><a href="#FORM-GRID-FILTER" class="headerlink" title="FORM_GRID_FILTER"></a><a href="#FORM_GRID_FILTER">FORM_GRID_FILTER</a></h6><p><strong>表单子表过滤(支持普通子表、Ajax子表)</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">FormGridFilterListener</td></tr><tr><td align="left">接口</td><td align="left">ValueListenerInterface</td></tr><tr><td align="left">返回值</td><td align="left">无</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断</td></tr></tbody></table><h6 id="FORM-GRID-EXCEL-TRANSFORM"><a href="#FORM-GRID-EXCEL-TRANSFORM" class="headerlink" title="FORM_GRID_EXCEL_TRANSFORM"></a><a href="#FORM_GRID_EXCEL_TRANSFORM">FORM_GRID_EXCEL_TRANSFORM</a></h6><p><strong>表单子表Excle转换处理</strong></p><table><thead><tr><th align="left">项</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">抽象类</td><td align="left">ExcelTransformListener</td></tr><tr><td align="left">返回值</td><td align="left">无</td></tr><tr><td align="left">异常</td><td align="left">-如抛出异常时，异常被包装成结果返回，后继执行被中断</td></tr></tbody></table><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.actionsoft.apps.poc.form.event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.hssf.usermodel.HSSFWorkbook;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Workbook;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.streaming.SXSSFWorkbook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.core.delegate.ProcessExecutionContext;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ExcelTransformListener;</span><br><span class="line"><span class="keyword">import</span> com.actionsoft.bpms.bpmn.engine.listener.ListenerConst;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFormExcelTransform</span> <span class="keyword">extends</span> <span class="title">ExcelTransformListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;表单中，下载、上传Excel后处理Excel文件的事件测试&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Actionsoft&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1.0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Workbook <span class="title">fixExcel</span><span class="params">(ProcessExecutionContext ctx, Workbook wb)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//参数获取</span></span><br><span class="line">        <span class="comment">//注意：除特殊说明外，下列参数仅在该事件中场景有效</span></span><br><span class="line">        ctx.getUserContext();<span class="comment">// 用户上下文对象</span></span><br><span class="line">        <span class="comment">// 时间点的常量见上表</span></span><br><span class="line">        String timeState = ctx.getParameterOfString(ListenerConst.FORM_EVENT_PARAM_EXCEL_TIMESTATE);<span class="comment">// 通过该值判断当前事件所处的时间点</span></span><br><span class="line">        <span class="comment">// 判断方式</span></span><br><span class="line">        <span class="keyword">if</span> (ListenerConst.FORM_EXCEL_TIMESTATE_IMPORT_BEFORE.equals(timeState)) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//wb对象可以构造为HSSFWorkbook或者SXSSFWorkbook</span></span><br><span class="line">        <span class="keyword">if</span> (wb <span class="keyword">instanceof</span> HSSFWorkbook) &#123;</span><br><span class="line">            <span class="comment">// 解析Excel（xls格式）</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (wb <span class="keyword">instanceof</span> SXSSFWorkbook) &#123;</span><br><span class="line">            <span class="comment">// 解析Excel（xlsx格式）</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果想要阻止下载或者上传的后续操作，可以return null;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wb;<span class="comment">//注意，即使对该对象进行修改，上层程序也不会读取新的数据。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="10、输出业务对话"><a href="#10、输出业务对话" class="headerlink" title="10、输出业务对话"></a>10、输出业务对话</h5><h6 id="抛出BPMNError"><a href="#抛出BPMNError" class="headerlink" title="抛出BPMNError"></a>抛出BPMNError</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//业务异常代码（自定义）</span></span><br><span class="line"><span class="comment">//业务异常信息（自定义）</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BPMNError(<span class="string">&quot;ERR0312&quot;</span>,<span class="string">&quot;订单尚未审核，不能进行支付操作&quot;</span>);</span><br></pre></td></tr></table></figure><h6 id="使用AlertMessage"><a href="#使用AlertMessage" class="headerlink" title="使用AlertMessage"></a>使用AlertMessage</h6><p><strong>仅适用以下事件</strong></p><ul><li>FORM_COMPLETE_VALIDATE</li><li>FORM_AFTER_SAVE</li><li>FORM_BEFORE_LOAD</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以下是表单横幅消息的示例代码，多条消息顺序按照添加的顺序展示</span></span><br><span class="line"><span class="comment">//第一个参数是BO名称，第二个参数是消息内容，这是一个默认的消息</span></span><br><span class="line">ctx.addAlertMessage(boName, <span class="string">&quot;测试横幅警告消息&quot;</span>);</span><br><span class="line">ctx.addAlertMessage(boName, <span class="string">&quot;第二个消息&quot;</span>);</span><br><span class="line">ctx.addAlertMessageInfo(boName, <span class="string">&quot;我是第三个提醒消息&quot;</span>);<span class="comment">//这是一个普通的消息</span></span><br><span class="line">ctx.addAlertMessageWarn(boName, <span class="string">&quot;我是第四个警告消息&quot;</span>);<span class="comment">//这是一个警告的消息</span></span><br><span class="line">ctx.addAlertMessageError(boName, <span class="string">&quot;我是第五个错误消息&quot;</span>);<span class="comment">//这是一个错误的消息</span></span><br><span class="line"><span class="comment">//另外提供了自定义外观的消息，第三个参数指定背景色，第四个参数指定文字颜色</span></span><br><span class="line">ctx.addAlertMessage(boName, <span class="string">&quot;消息&quot;</span>, <span class="string">&quot;bgColor&quot;</span>, <span class="string">&quot;fontColor&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> BPM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 炎黄BPM </tag>
            
            <tag> BPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7安装Docker</title>
      <link href="/2021/06/05/Centos7%E5%AE%89%E8%A3%85Docker/"/>
      <url>/2021/06/05/Centos7%E5%AE%89%E8%A3%85Docker/</url>
      
        <content type="html"><![CDATA[<h3 id="Centos-7-安装Docker"><a href="#Centos-7-安装Docker" class="headerlink" title="Centos 7 安装Docker"></a>Centos 7 安装Docker</h3><h4 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h4><p>使用 <code>root</code> 权限登录 Centos。确保 yum 包更新到最新。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure><p>安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p>设置yum源</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h4 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h4><p>可以查看所有仓库中所有docker版本，并选择特定版本安装</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure><p>安装Docker</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install docker-ce  <span class="comment">#由于repo中默认只开启stable仓库，故这里安装的是最新稳定版</span></span><br><span class="line">yum install &lt;FQPN&gt;  <span class="comment"># 例如：sudo yum install docker-ce-17.12.0.ce</span></span><br></pre></td></tr></table></figure><p>验证是否成功</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p>启动并加入开机启动</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h3 id="安装可视化界面Portainer"><a href="#安装可视化界面Portainer" class="headerlink" title="安装可视化界面Portainer"></a>安装可视化界面Portainer</h3><p>安装Docker之后，运行以下命令以获取最新的Portainer映像。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker search portainer</span><br></pre></td></tr></table></figure><p>拉取镜像</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull portainer/portainer</span><br></pre></td></tr></table></figure><p>示例如下：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker pull portainer/portainer</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from portainer/portainer</span><br><span class="line">94cfa856b2b1: Pull complete </span><br><span class="line">49d59ee0881a: Pull complete </span><br><span class="line">a2300fd28637: Pull complete </span><br><span class="line">Digest: sha256:fb45b43738646048a0a0cc74fcee2865b69efde857e710126084ee5de9be0f3f</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> portainer/portainer:latest</span><br><span class="line">docker.io/portainer/portainer:latest</span><br></pre></td></tr></table></figure><p>查看镜像</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9000:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --name prtainer-test portainer/portainer</span><br></pre></td></tr></table></figure><p>访问</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">http://IP:9000</span><br></pre></td></tr></table></figure><p>备注：</p><p>卸载Docker命令</p><p> yum erase+Docker版本号，例如如下：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum erase docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yShop环境部署</title>
      <link href="/2021/01/09/yShop%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
      <url>/2021/01/09/yShop%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h2><h3 id="JDK部署"><a href="#JDK部署" class="headerlink" title="JDK部署"></a>JDK部署</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><pre><code>    https://www.oracle.com/cn/java/technologies/javase/javase-jdk8-downloads.html</code></pre><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre><code>省略</code></pre><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>（1）系统变量：<code>JAVA_HOME</code></p><p>新建用户变量，<code>JAVA_HOME</code>，变量值为安装后的jdk的绝对路径，此处为：D:\java\jdk1.8.0</p><p>（2）系统变量：<code>CLASSPATH</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</span><br></pre></td></tr></table></figure><p>（需要注意的是变量值前边的.;一定不能少）</p><p>（3）用户变量：path（后边加）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin（加在尾部）</span><br></pre></td></tr></table></figure><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><h3 id="maven部署"><a href="#maven部署" class="headerlink" title="maven部署"></a>maven部署</h3><h4 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h4><pre><code>    https://maven.apache.org/download.cgi</code></pre><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>​    下载完成之后解压<br>​    把maven放到一个目录下</p><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><pre><code>    打开绝对路径+/apache-maven-3.8.1\conf    配置settings.xml</code></pre><p>配置本地仓库目录(D:\Program Files\maven-repository是本地仓库路径)</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;localRepository&gt;D:\Program Files\maven-repository&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure><p>配置中央仓库</p><p>在<code>&lt;mirrors&gt;&lt;/&lt;mirrors&gt;</code>里边加入中央仓库地址，例如阿里云中央仓库地址</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">   &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">   &lt;mirrorOf&gt;maven&lt;/mirrorOf&gt;</span><br><span class="line">   &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">   &lt;url&gt;http:<span class="comment">//maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span></span><br><span class="line"> &lt;/mirror&gt;</span><br></pre></td></tr></table></figure><p>加入环境变量</p><p>配置MAVEN_HOME   为maven的路径，例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\Program Files\apache-maven-3.8.1</span><br></pre></td></tr></table></figure><p>用户变量：path（后边加）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash">MAVEN_HOME%\bin</span></span><br></pre></td></tr></table></figure><h4 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn -version</span><br></pre></td></tr></table></figure><h3 id="安装数据库（mysql）"><a href="#安装数据库（mysql）" class="headerlink" title="安装数据库（mysql）"></a>安装数据库（mysql）</h3><p>下载地址</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;dev.mysql.com&#x2F;downloads&#x2F;windows&#x2F;installer&#x2F;8.0.html</span><br></pre></td></tr></table></figure><p>注意安装过程中配置的数据库，密码。</p><p>下载完成之后安装即可。</p><h3 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h3><p>​    详见链接 ：<a href="https://www.cnblogs.com/cang12138/p/8880776.html">https://www.cnblogs.com/cang12138/p/8880776.html</a></p><h3 id="后端项目编译"><a href="#后端项目编译" class="headerlink" title="后端项目编译"></a>后端项目编译</h3><pre><code>配置数据库连接 D:\example\yshopmall\yshop-admin\src\main\resources\config      编辑  application-dev.yml</code></pre><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">driverClassName: com.mysql.cj.jdbc.Driver</span><br><span class="line">url: jdbc:mysql:<span class="comment">//localhost:3306/yshop?serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8&amp;useSSL=false&amp;zeroDateTimeBehavior=convertToNull&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">username: root</span><br><span class="line">password: <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>进入项目根目录下执行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn install</span><br></pre></td></tr></table></figure><p>jar包生成</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\example\yshopmall\yshop-admin\target    包文件:yshop-admin-2.3.jar</span><br></pre></td></tr></table></figure><p>启动：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar yshop-admin-2.3.jar</span><br></pre></td></tr></table></figure><h3 id="前端项目编译"><a href="#前端项目编译" class="headerlink" title="前端项目编译"></a>前端项目编译</h3><p>前端项目下载地址:</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">https://gitee.com/guchengwuyue/yshopmall_qd</span><br></pre></td></tr></table></figure><p>安装nodeJs,下载地址：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;v8.3.0&#x2F;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node-v8.3.0-x64.msi    </span><br></pre></td></tr></table></figure><p>编译前端项目：根目录下执行：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>安装完成之后：</p><p>开发环境启动：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>生产环境打包：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>会在根目录下生成dist文件夹，下边的文件需要放到nginx下运行。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经典语录（一）</title>
      <link href="/2020/12/30/%E7%BB%8F%E5%85%B8%E8%AF%AD%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/12/30/%E7%BB%8F%E5%85%B8%E8%AF%AD%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">花开了，我便画花。 </span><br><span class="line">花谢了，我便画我自己。 </span><br><span class="line">你来了，我当然画你。 </span><br><span class="line">你走了，我便画一画回忆。</span><br><span class="line">每个人一辈子皆会遇见两个人，最后，一个在心上，一个在远方。</span><br><span class="line">时间过得张牙舞爪，光阴逃得死去活来。</span><br><span class="line">花开了，窗亦开了，却为何看不见你 </span><br><span class="line">看得见你，听得见你，却不能够爱你</span><br><span class="line">原来，这世上有一种伤，可以噬心蛀骨。 </span><br><span class="line">唤做“忏悔无门”。</span><br><span class="line">忘川，忘川，相望回首已成川。</span><br><span class="line">羽毛乌黑的不一定是只乌鸦，它还有可能是只烧焦的凤凰。</span><br><span class="line">一念贪欲起，百万障门开。</span><br><span class="line">凡夫耽恋于生，孰知佛乃以死为渡，彼岸往生。生何其苦，死方极乐。</span><br><span class="line">江南生梓木，灼灼孕芳华。</span><br><span class="line">无妨你爱我淡薄，但求你爱我长远——日日复月月，月月复年年，年年复此生。</span><br><span class="line">遇你，在懂爱之前，爱你，在伤你之后。</span><br><span class="line">青丝，情丝，聊赠青丝以寄情，惟愿侬心似我心...</span><br><span class="line">未必猛虎才伤人，兔子咬人才叫人心寒，不是吗？</span><br><span class="line">原来有鳞尾的不一定是鱼，它还有可能是条低调的龙。</span><br><span class="line">原来，我竟是宿在他眼瞳之中的一滴泪，从一开始，就注定了分离……</span><br><span class="line">真的有来世吗？那么，我愿为一只振翅而飞的蝶，一滴渗透宣纸的墨，一粒随风远去的沙……</span><br><span class="line">其实我们两个都有些缺心眼。我向他索要灵力是为了证明他爱我，他盼着我索要灵力是为了试探我爱他。一个是揣着满兜银两去打劫，一个是自愿敞开荷包任打劫。</span><br><span class="line">百年相守，他情根深种，万世成魔，情与谁共？</span><br><span class="line">无情则刚强，无爱则洒脱。</span><br><span class="line">二十念为一瞬，二十瞬为一弹指，二十弹指为一罗预，二十罗预为一须臾，一日一夜有三千须臾。 </span><br><span class="line">十年，一千零九十五万须臾……画尽了万张纸，方才挨过。</span><br><span class="line">人参很曲折，还有许多须</span><br><span class="line">“入地狱又如何？这天地之间，岂有我旭凤惧怕之物！” </span><br><span class="line">“锦觅，我想，终有一日我会杀了你。” </span><br><span class="line">“这宣纸你说送我可还作数？” </span><br><span class="line">“你啊……没心没肺……” </span><br><span class="line">“你放心，这些仙子纵是再好也入不了我的心。” </span><br><span class="line">“天地之大，女子众多，我心中只有一人，独好。” </span><br><span class="line">“旭凤此生仅娶一人。”</span><br><span class="line">我赠了凤翎，烧了九霄云殿，还曾违抗帝命，或许早已步入了地狱。</span><br><span class="line">所谓一往情深，梦醒不过是个弥天大谎。</span><br><span class="line">情爱有时原来可以这么简单。凡人一句俗话便可尽现玄机…… </span><br><span class="line">一个愿打，一个愿挨。</span><br><span class="line">你若再说一句爱我之谬言， </span><br><span class="line">我便立刻杀了你！ </span><br><span class="line">说一次，剐一次！</span><br><span class="line">“有一句话，你信也罢，不信也罢……我爱你……”</span><br><span class="line">原来，这世上有一种伤，可以噬心蛀骨。 —唤作---忏悔无门 </span><br><span class="line">真的有来世吗？ </span><br><span class="line">那么吾愿化为一只振翅的蝶 </span><br><span class="line">一滴透纸将散的墨 </span><br><span class="line">一粒风化远去的沙 </span><br><span class="line">......</span><br><span class="line">也算得是美满了吧？美满便是很好，圆满太难了，况且世上哪有这许多皆大欢喜…… </span><br><span class="line">花开了，窗亦开了，却为何看不见你？ </span><br><span class="line">看得见你，听得见你，却不能说爱你。</span><br><span class="line">湖山畔，湖山畔，云缠雨绵。雕栏外，雕栏外，红翻翠骈。惹下蜂愁蝶恋。三生石上缘，非因梦幻。一枕华胥，两下遽然。</span><br><span class="line">锦觅：我们 还能回到从前吗 </span><br><span class="line">旭凤：（摇头）再也回不去了 </span><br><span class="line">锦觅 （流泪 转身） </span><br><span class="line">旭凤（上前 拥住）：或许我们可以从头开始</span><br><span class="line">“为什么？” </span><br><span class="line">“你知道。” </span><br><span class="line">“你可曾爱过我？” </span><br><span class="line">“从未。”</span><br><span class="line">不是的，你记错了，你不爱我， </span><br><span class="line">你只是骗我说你爱我，骗我爹爹说你爱我，骗芳主们说你爱我，骗老胡说你爱我，骗连翘说你爱我，骗尽了天下人， </span><br><span class="line">骗的久了， </span><br><span class="line">连你自己都被骗的信以为真了。</span><br><span class="line">个人生做精灵并不可悲，可悲的是到死都还是个精灵。</span><br><span class="line">百废之中定有一宝。</span><br><span class="line">“锦觅，我来了。” </span><br><span class="line">“可是，我已经收了那皇帝小儿的聘礼。” </span><br><span class="line">“哦，可惜我预备下的六千年灵力了。” </span><br><span class="line">“……如此，我便勉为其难了。” </span><br><span class="line">万籁俱寂，仅余虫鸣花语。 </span><br><span class="line">月光下，一轮圆满。</span><br><span class="line">如今，他爱穗禾，穗禾亦爱他。 </span><br><span class="line">仅余我一人，爱不得，恨不能，两相挣扎，什么都不是……</span><br><span class="line">无限春思无尽思，却问伊君又几依。桥头呈纸凝双目，碧园持手眉锁迟。红尘纵有千千结，若解相思怎奢痴。有情还须有缘时，冰心一片双怀执。</span><br><span class="line">看得到却吃不到，人生最大之悲哀。我居然没有形体，意味着再也吃不上饭了，太可怕了，吓死我了！</span><br><span class="line">一壶清酒 一身尘灰 </span><br><span class="line">一念来回度余生无悔 </span><br><span class="line">一场回忆 生生灭灭 了了心扉 </span><br><span class="line">再回首浅尝心酒余味 </span><br><span class="line">一场回忆 生生灭灭 了了心扉</span><br><span class="line">我从来就不晓得什么是爱，只不过是读透了那一摞摞厚厚的话本，认真地拿捏揣摩，重复说着里面的台词，反复描摹里面的动作。我学会了脸红，学会了扭捏女儿态。 </span><br><span class="line">谁来告诉 ，我学得好不好呢……？</span><br><span class="line">凤凰是爱我的，爱到可以像这些灵力一样多一样无边无际。</span><br><span class="line">“你居然这般对我说……昨夜过后，我兴匆匆满怀希冀前来，而你给我的第一句话竟然是宣誓要嫁给夜神……” </span><br><span class="line">他捏了捏鬓角， </span><br><span class="line">“锦觅，我想，终有一日我会杀了你。”</span><br><span class="line">三个人，有两个是欢喜的，那么，便是多数了，也算得的是圆满了吧？ </span><br><span class="line">美满很好，圆满太难了， </span><br><span class="line">况，世上哪有这许多皆大欢喜……</span><br><span class="line">凤凰花花开两季，一季缘来，一季缘去。</span><br><span class="line">我们是清白的，比蛋清还白。</span><br><span class="line">缘深缘浅随它去，花开花落总归尘。</span><br><span class="line">我们做果子的也是有骨气的</span><br><span class="line">繁花似锦觅安宁,淡云流水度此生。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 经典语录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经典语录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android11刷面具教程</title>
      <link href="/2020/12/29/Android11%E5%88%B7%E9%9D%A2%E5%85%B7%E6%95%99%E7%A8%8B/"/>
      <url>/2020/12/29/Android11%E5%88%B7%E9%9D%A2%E5%85%B7%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="Android-11刷面具教程"><a href="#Android-11刷面具教程" class="headerlink" title="Android 11刷面具教程"></a>Android 11刷面具教程</h3><p>** 本教程适用于已经是Android11（且已经解BL锁）的系统。*</p><p><strong>刷机前一定要备份数据</strong></p><p><strong>刷机前一定要备份数据</strong></p><p><strong>刷机前一定要备份数据</strong></p><h4 id="一、刷入第三方Rec"><a href="#一、刷入第三方Rec" class="headerlink" title="一、刷入第三方Rec"></a>一、刷入第三方Rec</h4><p>1、手机关机，同时按’音量-‘和’电源键’，进入fastboot模式。</p><p>2、连接上电脑，执行以下（确保adb可行性）命令刷入：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">fastboot flash recovery twrp-3.4.0-10-raphael-mauronofrio.img</span><br></pre></td></tr></table></figure><p>3、刷完以后不要重启，不要重启，不要重启，返回主界面。</p><p>4、把防止加密的包拷贝到sdcard中，通过手机端刷入防止加密的包。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Disable_Dm-Verity_ForceEncrypt_11.02.2020.zip</span><br></pre></td></tr></table></figure><p>5、刷完以后就可以重启了。再次进Rec可以看到data已经是解密的。</p><h4 id="二、刷入面具。"><a href="#二、刷入面具。" class="headerlink" title="二、刷入面具。"></a>二、刷入面具。</h4><p>目前刷入的是21版本的（21.1版本的刷入会卡fastboot，建议刷入21.2最新版本的）</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Magisk-v21.2.zip</span><br></pre></td></tr></table></figure><p>刷入完重启即可。</p><h4 id="三、刷入Edxposed。"><a href="#三、刷入Edxposed。" class="headerlink" title="三、刷入Edxposed。"></a>三、刷入Edxposed。</h4><p>上述步骤刷完以后已经获得面具的权限。可以通过搞基助手刷入Edxposed及Edxposed Manager。</p><p>备注：</p><p>如果版本存在非Android11 的Rec，通过格式化data，然后再进行上述操作即可。</p><p>附件清单如下：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/1JjhuwdKL2vb_L-BYHFS74g </span><br><span class="line">提取码：saag </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面具Rec </tag>
            
            <tag> Android11 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaWeb接口文档</title>
      <link href="/2020/12/09/javaWeb%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/"/>
      <url>/2020/12/09/javaWeb%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="传统swagger（之前在用）接口文档的缺点："><a href="#传统swagger（之前在用）接口文档的缺点：" class="headerlink" title="传统swagger（之前在用）接口文档的缺点："></a>传统swagger（之前在用）接口文档的缺点：</h3><p>1、代码侵入性太强。</p><p>2、写着麻烦。需要写大量的注解，太麻烦！</p><h3 id="smart-doc的优点："><a href="#smart-doc的优点：" class="headerlink" title="smart-doc的优点："></a>smart-doc的优点：</h3><p>1、不需要注解，无侵入性。</p><p>2、只需要写好注释即可，界面也比较美观。</p><p>3、对一些常用的电话、地址之类的模拟的数据跟真的一样（哈哈哈）。</p><p>4、可以生成Markdown、HTML5等多种文档格式。</p><p>以下是官方对其描述的一些特性：</p><p><strong>零注解、零学习成本、只需要写标准java注释。</strong></p><p><strong>基于源代码接口定义自动推导，强大的返回结构推导。</strong></p><p><strong>支持Spring MVC,Spring Boot,Spring Boot Web Flux(controller书写方式)。</strong></p><p><strong>支持Callable,Future,CompletableFuture等异步接口返回的推导。</strong></p><p><strong>支持JavaBean上的JSR303参数校验规范。 对json请求参数的接口能够自动生成模拟json参数。</strong></p><p><strong>对一些常用字段定义能够生成有效的模拟值。</strong></p><p><strong>支持生成json返回值示例。</strong></p><p><strong>支持从项目外部加载源代码来生成字段注释(包括标准规范发布的jar包)。</strong></p><p><strong>支持生成多种格式文档：Markdown、HTML5、Asciidoctor、Postman Collection。</strong></p><p><strong>轻易实现在Spring Boot服务上在线查看静态HTML5 api文档。</strong></p><p><strong>开放文档数据，可自由实现接入文档管理系统。</strong></p><p><strong>支持生成dubbo rpc文档。</strong></p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><h3 id="一、maven插件（推荐）"><a href="#一、maven插件（推荐）" class="headerlink" title="一、maven插件（推荐）"></a>一、maven插件（推荐）</h3><h4 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;com.github.shalousun&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;smart-doc-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.1.9&lt;/version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;!--指定生成文档的使用的配置文件,配置文件放在自己的项目中--&gt;</span><br><span class="line">                    &lt;configFile&gt;./src/main/resources/smart-doc.json&lt;/configFile&gt;</span><br><span class="line">                    &lt;!--指定项目名称--&gt;</span><br><span class="line">                    &lt;projectName&gt;UU跑腿广告服务中心文档&lt;/projectName&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;html&lt;/goal&gt;</span><br><span class="line">                        &lt;/goals&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br></pre></td></tr></table></figure><h4 id="2、添加smart-doc生成文档的配置"><a href="#2、添加smart-doc生成文档的配置" class="headerlink" title="2、添加smart-doc生成文档的配置"></a>2、添加smart-doc生成文档的配置</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;serverUrl&quot;</span>: <span class="string">&quot;http://127.0.0.1&quot;</span>, <span class="comment">//设置服务器地址,非必须</span></span><br><span class="line">  <span class="attr">&quot;isStrict&quot;</span>: <span class="literal">false</span>, <span class="comment">//是否开启严格模式</span></span><br><span class="line">  <span class="attr">&quot;allInOne&quot;</span>: <span class="literal">true</span>,  <span class="comment">//是否将文档合并到一个文件中，一般推荐为true</span></span><br><span class="line">  <span class="attr">&quot;outPath&quot;</span>: <span class="string">&quot;D://md2&quot;</span>, <span class="comment">//指定文档的输出路径</span></span><br><span class="line">  <span class="attr">&quot;coverOld&quot;</span>: <span class="literal">true</span>,  <span class="comment">//是否覆盖旧的文件，主要用于mardown文件覆盖</span></span><br><span class="line">  <span class="attr">&quot;packageFilters&quot;</span>: <span class="string">&quot;&quot;</span>,<span class="comment">//controller包过滤，多个包用英文逗号隔开</span></span><br><span class="line">  <span class="attr">&quot;md5EncryptedHtmlName&quot;</span>: <span class="literal">false</span>,<span class="comment">//只有每个controller生成一个html文件是才使用</span></span><br><span class="line">  <span class="attr">&quot;projectName&quot;</span>: <span class="string">&quot;smart-doc&quot;</span>,<span class="comment">//配置自己的项目名称</span></span><br><span class="line">  <span class="attr">&quot;skipTransientField&quot;</span>: <span class="literal">true</span>,<span class="comment">//目前未实现</span></span><br><span class="line">  <span class="attr">&quot;showAuthor&quot;</span>:<span class="literal">true</span>,<span class="comment">//是否显示接口作者名称，默认是true,不想显示可关闭</span></span><br><span class="line">  <span class="attr">&quot;requestFieldToUnderline&quot;</span>:<span class="literal">true</span>, <span class="comment">//自动将驼峰入参字段在文档中转为下划线格式,//@since 1.8.7 版本开始</span></span><br><span class="line">  <span class="attr">&quot;responseFieldToUnderline&quot;</span>:<span class="literal">true</span>,<span class="comment">//自动将驼峰入参字段在文档中转为下划线格式,//@since 1.8.7 版本开始</span></span><br><span class="line">  <span class="attr">&quot;inlineEnum&quot;</span>:<span class="literal">true</span>,<span class="comment">//设置为true会将枚举详情展示到参数表中，默认关闭，//@since 1.8.8版本开始</span></span><br><span class="line">  <span class="attr">&quot;recursionLimit&quot;</span>:<span class="number">7</span>,<span class="comment">//设置允许递归执行的次数用于避免栈溢出，默认是7，正常为3次以内，//@since 1.8.8版本开始</span></span><br><span class="line">  <span class="attr">&quot;ignoreRequestParams&quot;</span>:[ <span class="comment">//忽略请求参数对象，把不想生成文档的参数对象屏蔽掉，@since 1.9.2</span></span><br><span class="line">      <span class="string">&quot;org.springframework.ui.ModelMap&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;dataDictionaries&quot;</span>: [ <span class="comment">//配置数据字典，没有需求可以不设置</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;http状态码字典&quot;</span>, <span class="comment">//数据字典的名称</span></span><br><span class="line">      <span class="attr">&quot;enumClassName&quot;</span>: <span class="string">&quot;com.power.common.enums.HttpCodeEnum&quot;</span>, <span class="comment">//数据字典枚举类名称</span></span><br><span class="line">      <span class="attr">&quot;codeField&quot;</span>: <span class="string">&quot;code&quot;</span>,<span class="comment">//数据字典字典码对应的字段名称</span></span><br><span class="line">      <span class="attr">&quot;descField&quot;</span>: <span class="string">&quot;message&quot;</span><span class="comment">//数据字典对象的描述信息字典</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;errorCodeDictionaries&quot;</span>: [&#123; <span class="comment">//错误码列表，没有需求可以不设置</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;title&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;enumClassName&quot;</span>: <span class="string">&quot;com.power.common.enums.HttpCodeEnum&quot;</span>, <span class="comment">//错误码枚举类,如果是枚举是在一个类中定义则用$链接类BaseErrorCode$Common</span></span><br><span class="line">    <span class="attr">&quot;codeField&quot;</span>: <span class="string">&quot;code&quot;</span>,<span class="comment">//错误码的code码字段名称</span></span><br><span class="line">    <span class="attr">&quot;descField&quot;</span>: <span class="string">&quot;message&quot;</span><span class="comment">//错误码的描述信息对应的字段名</span></span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;revisionLogs&quot;</span>: [ <span class="comment">//设置文档变更记录，没有需求可以不设置</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0&quot;</span>, <span class="comment">//文档版本号</span></span><br><span class="line">      <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;update&quot;</span>, <span class="comment">//变更操作状态，一般为：创建、更新等</span></span><br><span class="line">      <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;author&quot;</span>, <span class="comment">//文档变更作者　　　　&quot;revisionTime&quot;: &quot;2020-09-24&quot;, //变更时间</span></span><br><span class="line">      <span class="attr">&quot;remarks&quot;</span>: <span class="string">&quot;desc&quot;</span> <span class="comment">//变更描述</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;customResponseFields&quot;</span>: [ <span class="comment">//自定义添加字段和注释，api-doc后期遇到同名字段则直接给相应字段加注释，非必须</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;code&quot;</span>,<span class="comment">//覆盖响应码字段</span></span><br><span class="line">      <span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;响应代码&quot;</span>,<span class="comment">//覆盖响应码的字段注释</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;00000&quot;</span><span class="comment">//设置响应码的值</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;requestHeaders&quot;</span>: [ <span class="comment">//设置请求头，没有需求可以不设置</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;token&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;desc&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;required&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;value&quot;</span>:<span class="string">&quot;55&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;since&quot;</span>: <span class="string">&quot;-&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;rpcApiDependencies&quot;</span>:[&#123; <span class="comment">// 项目开放的dubbo api接口模块依赖，配置后输出到文档方便使用者集成</span></span><br><span class="line">      <span class="attr">&quot;artifactId&quot;</span>:<span class="string">&quot;SpringBoot2-Dubbo-Api&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;groupId&quot;</span>:<span class="string">&quot;com.demo&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;version&quot;</span>:<span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">&quot;rpcConsumerConfig&quot;</span>:<span class="string">&quot;src/main/resources/consumer-example.conf&quot;</span>,<span class="comment">//文档中添加dubbo consumer集成配置，用于方便集成方可以快速集成</span></span><br><span class="line">  <span class="attr">&quot;apiObjectReplacements&quot;</span>: [&#123; <span class="comment">// 自smart-doc 1.8.5开始你可以使用自定义类覆盖其他类做文档渲染，使用全类名</span></span><br><span class="line">      <span class="attr">&quot;className&quot;</span>: <span class="string">&quot;org.springframework.data.domain.Pageable&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;replacementClassName&quot;</span>: <span class="string">&quot;com.power.doc.model.PageRequestDto&quot;</span> <span class="comment">//自定义的PageRequestDto替换Pageable做文档渲染</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">&quot;apiConstants&quot;</span>: [&#123;<span class="comment">//从1.8.9开始配置自己的常量类，smart-doc在解析到常量时自动替换为具体的值,如：http://localhost:8080/testConstants/+ApiVersion.VERSION中的ApiVersion.VERSION会被替换</span></span><br><span class="line">      <span class="attr">&quot;constantsClassName&quot;</span>: <span class="string">&quot;com.power.doc.constants.RequestParamConstant&quot;</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">&quot;sourceCodePaths&quot;</span>: [ <span class="comment">//设置代码路径，smart-doc默认会自动加载src/main/java, 没有需求可以不设置 1.0.0以后版本此配置不再生效</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;src/main/java&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;desc&quot;</span>: <span class="string">&quot;测试&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、运行插件生成文档"><a href="#3、运行插件生成文档" class="headerlink" title="3、运行插件生成文档"></a>3、运行插件生成文档</h4><p><img src="https://img2020.cnblogs.com/blog/1171252/202009/1171252-20200924133536412-1092390809.png" alt="img"></p><p>最后通过ip和端口号访问即可。</p><h3 id="二、测试类方式"><a href="#二、测试类方式" class="headerlink" title="二、测试类方式"></a>二、测试类方式</h3><h4 id="1、引入依赖-1"><a href="#1、引入依赖-1" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.github.shalousun&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;smart-doc&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.8.7&lt;/version&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="2、每个项目建议都写一个测试类"><a href="#2、每个项目建议都写一个测试类" class="headerlink" title="2、每个项目建议都写一个测试类"></a>2、每个项目建议都写一个测试类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.power.common.util.DateTimeUtil;</span><br><span class="line"><span class="keyword">import</span> com.power.doc.builder.ApiDocBuilder;</span><br><span class="line"><span class="keyword">import</span> com.power.doc.builder.HtmlApiDocBuilder;</span><br><span class="line"><span class="keyword">import</span> com.power.doc.constants.DocGlobalConstants;</span><br><span class="line"><span class="keyword">import</span> com.power.doc.model.*;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> qyy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: SpringBootTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@projectName</span> pt</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: api文档生成测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/1/7 000710:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBuilderMdControllersApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApiConfig config = <span class="keyword">new</span> ApiConfig();</span><br><span class="line">        config.setServerUrl(<span class="string">&quot;http://localhost:8080&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置为严格模式，Smart-doc将降至要求每个Controller暴露的接口写上标准文档注释</span></span><br><span class="line">        <span class="comment">//config.setStrict(true);</span></span><br><span class="line">        config.setStrict(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//当把AllInOne设置为true时，Smart-doc将会把所有接口生成到一个Markdown、HHTML或者AsciiDoc中</span></span><br><span class="line">        config.setAllInOne(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Set the api document output path.</span></span><br><span class="line">        config.setOutPath(<span class="string">&quot;d:\\md&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置接口包扫描路径过滤，如果不配置则Smart-doc默认扫描所有的接口类</span></span><br><span class="line">        <span class="comment">// 配置多个报名有英文逗号隔开</span></span><br><span class="line">        <span class="comment">// config.setPackageFilters(&quot;com.power.doc.controller&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//since 1.7.5</span></span><br><span class="line">        <span class="comment">//如果该选项的值为false,则smart-doc生成allInOne.md文件的名称会自动添加版本号</span></span><br><span class="line">        config.setCoverOld(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//since 1.7.5</span></span><br><span class="line">        <span class="comment">//设置项目名(非必须)，如果不设置会导致在使用一些自动添加标题序号的工具显示的序号不正常</span></span><br><span class="line">        config.setProjectName(<span class="string">&quot;XXXXX接口文档&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置公共请求头.如果不需要请求头，则无需设置</span></span><br><span class="line">        config.setRequestHeaders(</span><br><span class="line">                ApiReqHeader.header().setName(<span class="string">&quot;access_token&quot;</span>).setType(<span class="string">&quot;string&quot;</span>)</span><br><span class="line">                        .setDesc(<span class="string">&quot;Basic auth credentials&quot;</span>).setRequired(<span class="keyword">true</span>).setSince(<span class="string">&quot;v1.1.0&quot;</span>),</span><br><span class="line">                ApiReqHeader.header().setName(<span class="string">&quot;user_uuid&quot;</span>).setType(<span class="string">&quot;string&quot;</span>).setDesc(<span class="string">&quot;User Uuid key&quot;</span>)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//生成Markdown文件</span></span><br><span class="line">        ApiDocBuilder.buildApiDoc(config);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        DateTimeUtil.printRunTime(end, start);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBuilderHtmlControllersApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApiConfig config = <span class="keyword">new</span> ApiConfig();</span><br><span class="line">        config.setServerUrl(<span class="string">&quot;http://192.168.6.110:8080&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置为严格模式，Smart-doc将降至要求每个Controller暴露的接口写上标准文档注释</span></span><br><span class="line">        config.setStrict(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当把AllInOne设置为true时，Smart-doc将会把所有接口生成到一个Markdown、HHTML或者AsciiDoc中</span></span><br><span class="line">        config.setAllInOne(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//HTML5文档，建议直接放到src/main/resources/static/doc下，Smart-doc提供一个配置常量HTML_DOC_OUT_PATH</span></span><br><span class="line">        config.setOutPath(DocGlobalConstants.HTML_DOC_OUT_PATH);</span><br><span class="line"></span><br><span class="line">        config.setProjectName(<span class="string">&quot;XXXXXX接口文档&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置接口包扫描路径过滤，如果不配置则Smart-doc默认扫描所有的接口类</span></span><br><span class="line">        <span class="comment">// 配置多个报名有英文逗号隔开</span></span><br><span class="line">        <span class="comment">//config.setPackageFilters(&quot;com.power.doc.controller&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置公共请求头.如果不需要请求头，则无需设置</span></span><br><span class="line"><span class="comment">//        config.setRequestHeaders(</span></span><br><span class="line"><span class="comment">//                ApiReqHeader.header().setName(&quot;access_token&quot;).setType(&quot;string&quot;)</span></span><br><span class="line"><span class="comment">//                        .setDesc(&quot;Basic auth credentials&quot;).setRequired(true).setSince(&quot;v1.1.0&quot;),</span></span><br><span class="line"><span class="comment">//                ApiReqHeader.header().setName(&quot;user_uuid&quot;).setType(&quot;string&quot;).setDesc(&quot;User Uuid key&quot;)</span></span><br><span class="line"><span class="comment">//        );</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置错误错列表，遍历自己的错误码设置给Smart-doc即可</span></span><br><span class="line"><span class="comment">//        List&lt;ApiErrorCode&gt; errorCodeList = new ArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        for (ErrorCodeEnum codeEnum : ErrorCodeEnum.values()) &#123;</span></span><br><span class="line"><span class="comment">//            ApiErrorCode errorCode = new ApiErrorCode();</span></span><br><span class="line"><span class="comment">//            errorCode.setValue(codeEnum.getCode()).setDesc(codeEnum.getDesc());</span></span><br><span class="line"><span class="comment">//            errorCodeList.add(errorCode);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        //不需要显示错误码，则可以设置</span></span><br><span class="line"><span class="comment">//        config.setErrorCodes(errorCodeList);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//生成HTML5文件</span></span><br><span class="line">        HtmlApiDocBuilder.buildApiDoc(config);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        DateTimeUtil.printRunTime(end, start);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、测试生成接口文档。"><a href="#3、测试生成接口文档。" class="headerlink" title="3、测试生成接口文档。"></a>3、测试生成接口文档。</h4><p>我这边主要是生成的html接口文档，生成之后会在项目<code>\src\main\resources\static\doc</code>这个目录下，可以直接在浏览器输入<code>http://192.168.6.110:8080/doc/index.html#</code>即可访问。</p><h4 id="4、注释说明"><a href="#4、注释说明" class="headerlink" title="4、注释说明"></a>4、注释说明</h4><p>一定要写java注释,注释如下参考：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br></pre></td></tr></table></figure><h4 id="5、效果请查看官网所示"><a href="#5、效果请查看官网所示" class="headerlink" title="5、效果请查看官网所示"></a>5、效果请查看官网所示</h4><p><a href="https://gitee.com/smart-doc-team/smart-doc/wikis/%E6%96%87%E6%A1%A3%E6%95%88%E6%9E%9C%E5%9B%BE?sort_id=1652819">https://gitee.com/smart-doc-team/smart-doc/wikis/%E6%96%87%E6%A1%A3%E6%95%88%E6%9E%9C%E5%9B%BE?sort_id=1652819</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7安装Elasticsearch7.4.1</title>
      <link href="/2020/12/09/Centos7%E5%AE%89%E8%A3%85Elasticsearch7-4-1/"/>
      <url>/2020/12/09/Centos7%E5%AE%89%E8%A3%85Elasticsearch7-4-1/</url>
      
        <content type="html"><![CDATA[<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><pre><code>从[官网](https://www.elastic.co/cn/downloads/elasticsearch)下载Elasticsearch 7.4.1,linux版本的。</code></pre><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xf elasticsearch-7.4.1</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh elasticsearch-7.4.1/bin/elasticsearch</span><br></pre></td></tr></table></figure><p>直至出现如下情况方为正常的：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;node-1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;cluster_name&quot;</span> : <span class="string">&quot;elasticsearch&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;cluster_uuid&quot;</span> : <span class="string">&quot;GJ8qGH3hR6eO6ZZO2YnG4A&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;number&quot;</span> : <span class="string">&quot;7.4.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build_flavor&quot;</span> : <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build_type&quot;</span> : <span class="string">&quot;tar&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build_hash&quot;</span> : <span class="string">&quot;fc0eeb6e2c25915d63d871d344e3d0b45ea0ea1e&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build_date&quot;</span> : <span class="string">&quot;2019-10-22T17:16:35.176724Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build_snapshot&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;lucene_version&quot;</span> : <span class="string">&quot;8.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;minimum_wire_compatibility_version&quot;</span> : <span class="string">&quot;6.8.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;minimum_index_compatibility_version&quot;</span> : <span class="string">&quot;6.0.0-beta1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;tagline&quot;</span> : <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><hr><h2 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h2><h3 id="1、jdk版本不匹配"><a href="#1、jdk版本不匹配" class="headerlink" title="1、jdk版本不匹配"></a>1、jdk版本不匹配</h3><pre><code>elasticsearch-7.x版本内置jdk的版本。编辑以下命令：</code></pre><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /usr/<span class="built_in">local</span>/elk/elasticsearch-7.4.1/bin/elasticsearch-env</span><br></pre></td></tr></table></figure><p>  在图示部分加入jdk的路径即可。如图所示：</p><p><img src="https://uufefile.uupt.com/PicLib/uunote/images/%E5%B0%8FQ%E6%88%AA%E5%9B%BE-20191029173631_1572341813914.png" alt="小Q截图-20191029173631.png"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/elk/elasticsearch-7.4.1/jdk</span><br></pre></td></tr></table></figure><h3 id="2、can-not-run-elasticsearch-as-root"><a href="#2、can-not-run-elasticsearch-as-root" class="headerlink" title="2、can  not  run  elasticsearch  as  root"></a>2、can  not  run  elasticsearch  as  root</h3><p>出现如下错误：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.elasticsearch.bootstrap.StartupException: java.lang.RuntimeException: can  not  run  elasticsearch  as  root</span><br></pre></td></tr></table></figure><p>该问题是因为运行es不能使用root用户，因此要新建用户es。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd es</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd es</span><br></pre></td></tr></table></figure><p>修改文件所属为es</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown -R es:es /usr/<span class="built_in">local</span>/elk/elasticsearch-7.4.1</span><br></pre></td></tr></table></figure><p>之后切换es用户：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su es</span><br></pre></td></tr></table></figure><p>再次执行即可。</p><h3 id="3、-max-file-descriptors-4096-for-elasticsearch-process-is-too-low-increase-to-at-least-65535"><a href="#3、-max-file-descriptors-4096-for-elasticsearch-process-is-too-low-increase-to-at-least-65535" class="headerlink" title="3、 max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]"></a>3、 max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]</h3><p>  解决：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/security/limits.conf</span><br></pre></td></tr></table></figure><p>  在最后面追加下面内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">es hard nofile 65536</span><br><span class="line">es soft nofile 65536</span><br></pre></td></tr></table></figure><p>用户退出后重新登录生效。</p><h3 id="4、max-virtual-memory-areas-vm-max-map-count-65530-is-too-low-increase-to-at-least-262144"><a href="#4、max-virtual-memory-areas-vm-max-map-count-65530-is-too-low-increase-to-at-least-262144" class="headerlink" title="4、max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]"></a>4、max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</h3><p>  解决：<br>    切换到root用户</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/sysctl.conf </span><br></pre></td></tr></table></figure><p>添加 </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vm.max_map_count=655360</span><br></pre></td></tr></table></figure><p>执行命令： </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p>即可解决。</p><h3 id="5、max-number-of-threads-3828-for-user-es-is-too-low-increase-to-at-least-4096"><a href="#5、max-number-of-threads-3828-for-user-es-is-too-low-increase-to-at-least-4096" class="headerlink" title="5、max number of threads [3828] for user [es] is too low, increase to at least [4096]"></a>5、max number of threads [3828] for user [es] is too low, increase to at least [4096]</h3><p> 解决：(和3修改的同一个文件)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/security/limits.conf</span><br></pre></td></tr></table></figure><p>  在最后面追加下面内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">es soft nproc  4096</span><br><span class="line">es hard nproc  4096</span><br></pre></td></tr></table></figure><p>用户退出后重新登录生效。<br>最终这个文件如图所示：</p><p><img src="https://uufefile.uupt.com/PicLib/uunote/images/%E5%B0%8FQ%E6%88%AA%E5%9B%BE-20191029181034_1572344413779.png" alt="小Q截图-20191029181034.png"></p><h3 id="6、外网无法访问"><a href="#6、外网无法访问" class="headerlink" title="6、外网无法访问"></a>6、外网无法访问</h3><p>  以上错误都修改完成之后，外网无法访问。<br>  执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl 192.168.6.88:9200</span><br></pre></td></tr></table></figure><p>返回结果:</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;node-1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;cluster_name&quot;</span> : <span class="string">&quot;elasticsearch&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;cluster_uuid&quot;</span> : <span class="string">&quot;GJ8qGH3hR6eO6ZZO2YnG4A&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;number&quot;</span> : <span class="string">&quot;7.4.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build_flavor&quot;</span> : <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build_type&quot;</span> : <span class="string">&quot;tar&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build_hash&quot;</span> : <span class="string">&quot;fc0eeb6e2c25915d63d871d344e3d0b45ea0ea1e&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build_date&quot;</span> : <span class="string">&quot;2019-10-22T17:16:35.176724Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build_snapshot&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;lucene_version&quot;</span> : <span class="string">&quot;8.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;minimum_wire_compatibility_version&quot;</span> : <span class="string">&quot;6.8.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;minimum_index_compatibility_version&quot;</span> : <span class="string">&quot;6.0.0-beta1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;tagline&quot;</span> : <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本机可以访问，外网无法访问。</p><p>解决：</p><p>编辑 <code>elasticsearch.yml</code> 文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">node.name:</span> <span class="string">node-1</span></span><br></pre></td></tr></table></figure><p>前面的#打开</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#network.host: 192.168.0.1</span></span><br><span class="line"><span class="meta">network.host</span>: <span class="string">192.168.6.88</span></span><br><span class="line"><span class="comment">#network.host: 127.0.0.1  这里把network.host 设置为自己的ip地址 网上有设置成0.0.0.0的应该也可以自己设置一下试试</span></span><br><span class="line"></span><br><span class="line"><span class="meta">cluster.initial_master_nodes</span>: <span class="string">[&quot;node-1&quot;] 这里一定要这样设置，我就是这里没有这样设置出问题的，弄了好久</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在最后加上这两句，要不然，外面浏览器就访问不了哈</span></span><br><span class="line"><span class="meta">http.cors.enabled</span>: <span class="string">true</span></span><br><span class="line"><span class="meta">http.cors.allow-origin</span>: <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><p>备注：elasticsearch.yml配置文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">  <span class="comment"># ======================== Elasticsearch Configuration =========================</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> Elasticsearch comes with reasonable defaults for most settings.</span></span><br><span class="line"><span class="comment">#       Before you set out to tweak and tune the configuration, make sure you</span></span><br><span class="line"><span class="comment">#       understand what are you trying to accomplish and the consequences.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The primary way of configuring a node is via this file. This template lists</span></span><br><span class="line"><span class="comment"># the most important settings you may want to configure for a production cluster.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please consult the documentation for further information on configuration options:</span></span><br><span class="line"><span class="comment"># https://www.elastic.co/guide/en/elasticsearch/reference/index.html</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ---------------------------------- Cluster -----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Use a descriptive name for your cluster:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#cluster.name: my-application</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ------------------------------------ Node ------------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Use a descriptive name for the node:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Add custom attributes to the node:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#node.attr.rack: r1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ----------------------------------- Paths ------------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Path to directory where to store the data (separate multiple locations by comma):</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#path.data: /path/to/data</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Path to log files:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#path.logs: /path/to/logs</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ----------------------------------- Memory -----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Lock the memory on startup:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#bootstrap.memory_lock: true</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Make sure that the heap size is set to about half the memory available</span></span><br><span class="line"><span class="comment"># on the system and that the owner of the process is allowed to use this</span></span><br><span class="line"><span class="comment"># limit.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Elasticsearch performs poorly when the system is swapping the memory.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ---------------------------------- Network -----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Set the bind address to a specific IP (IPv4 or IPv6):</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">192.168</span><span class="number">.6</span><span class="number">.88</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Set a custom port for HTTP:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For more information, consult the network module documentation.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># --------------------------------- Discovery ----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Pass an initial list of hosts to perform discovery when this node is started:</span></span><br><span class="line"><span class="comment"># The default list of hosts is [&quot;127.0.0.1&quot;, &quot;[::1]&quot;]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#discovery.seed_hosts: [&quot;host1&quot;, &quot;host2&quot;]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Bootstrap the cluster using an initial set of master-eligible nodes:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> [<span class="string">&quot;node-1&quot;</span>]</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For more information, consult the discovery and cluster formation module documentation.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ---------------------------------- Gateway -----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Block initial recovery after a full cluster restart until N nodes are started:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#gateway.recover_after_nodes: 3</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For more information, consult the gateway module documentation.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ---------------------------------- Various -----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Require explicit names when deleting indices:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="comment">#action.destructive_requires_name: true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins自动化部署vue项目（二）</title>
      <link href="/2020/12/09/jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2vue%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2020/12/09/jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2vue%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="安装插件Publish-Over-SSH"><a href="#安装插件Publish-Over-SSH" class="headerlink" title="安装插件Publish Over SSH"></a>安装插件Publish Over SSH</h2><p>安装Publish Over SSH插件，并陪系统设置里面配置ssh的hostname、url、username等相关信息，如下图所示：</p><p><img src="https://uufefile.uupt.com/PicLib/uunote/images/image_1561625203366.png" alt="image.png"></p><h2 id="配置-Post-build-Actions"><a href="#配置-Post-build-Actions" class="headerlink" title="配置 Post-build Actions"></a>配置 Post-build Actions</h2><p>英文名字应该都懂，在这里也不多说。</p><p>同样也需要执行命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;root&#x2F;server&#x2F;vue   #进入目录</span><br><span class="line"></span><br><span class="line">tar -zxvf aic.tar.gz         #解压传输过来的代码包</span><br><span class="line"></span><br><span class="line">rm -rf aic.tar.gz      #删除代码包</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://uufefile.uupt.com/PicLib/uunote/images/image_1561625338111.png" alt="image.png"></p><p>至此，就就已经完成。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins自动化部署vue项目（一）</title>
      <link href="/2020/12/09/jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2vue%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2020/12/09/jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2vue%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="加入nodeJS插件配置"><a href="#加入nodeJS插件配置" class="headerlink" title="加入nodeJS插件配置"></a>加入nodeJS插件配置</h2><p>  在插件管理中安装nodejs插件，然后在配置里面配置nodejs插件即可。</p><h2 id="新建自由风格的项目"><a href="#新建自由风格的项目" class="headerlink" title="新建自由风格的项目"></a>新建自由风格的项目</h2><h4 id="基本配置（具体看图，没啥可说的）"><a href="#基本配置（具体看图，没啥可说的）" class="headerlink" title="基本配置（具体看图，没啥可说的）"></a>基本配置（具体看图，没啥可说的）</h4><p><img src="https://uufefile.uupt.com/PicLib/uunote/images/image_1561624238312.png" alt="image.png"></p><h4 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h4><p>选择项目的git地址和分支，添加上用户访问权限即可。<br><img src="https://uufefile.uupt.com/PicLib/uunote/images/image_1561624322039.png" alt="image.png"></p><h4 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h4><p>最重要的是url和token，这两个需要在git中配置。</p><p><img src="https://uufefile.uupt.com/PicLib/uunote/images/image_1561624459649.png" alt="image.png"></p><p><img src="https://uufefile.uupt.com/PicLib/uunote/images/image_1561624520303.png" alt="image.png"></p><h4 id="构建环境"><a href="#构建环境" class="headerlink" title="构建环境"></a>构建环境</h4><p>选择nodeJs即可。</p><p><img src="https://uufefile.uupt.com/PicLib/uunote/images/image_1561624549053.png" alt="image.png"></p><h4 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h4><p>执行shell命令。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo $PATH</span><br><span class="line"></span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">npm install chromedriver --chromedriver_cdnurl&#x3D;http:&#x2F;&#x2F;cdn.npm.taobao.org&#x2F;dist&#x2F;chromedriver</span><br><span class="line">npm install   #安装依赖</span><br><span class="line">npm run build</span><br><span class="line">tar -zcvf dist.tar.gz dist&#x2F; #压缩，方便传输</span><br></pre></td></tr></table></figure><p><img src="https://uufefile.uupt.com/PicLib/uunote/images/image_1561624597309.png" alt="image.png"></p><h2 id="配置web钩子"><a href="#配置web钩子" class="headerlink" title="配置web钩子"></a>配置web钩子</h2><p>即刚才的url和token。</p><p><img src="https://uufefile.uupt.com/PicLib/uunote/images/image_1561624743878.png" alt="image.png"></p><p>至此，自动化部署vue项目已经完成，下篇说明如何推送到远程服务器上。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java高效率代码</title>
      <link href="/2020/12/08/Java%E9%AB%98%E6%95%88%E7%8E%87%E4%BB%A3%E7%A0%81/"/>
      <url>/2020/12/08/Java%E9%AB%98%E6%95%88%E7%8E%87%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h3 id="1-常量-amp-变量"><a href="#1-常量-amp-变量" class="headerlink" title="1.常量&amp;变量"></a>1.常量&amp;变量</h3><h4 id="1-1-直接赋值常量值，禁止声明新对象"><a href="#1-1-直接赋值常量值，禁止声明新对象" class="headerlink" title="1.1.直接赋值常量值，禁止声明新对象"></a>1.1.直接赋值常量值，禁止声明新对象</h4><p>直接赋值常量值，只是创建了一个对象引用，而这个对象引用指向常量值。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Long i = <span class="keyword">new</span> Long(<span class="number">1L</span>);</span><br><span class="line"></span><br><span class="line">String s = <span class="keyword">new</span> String(<span class="string">&quot;abc&quot;</span>);</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Long i = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">String s = <span class="string">&quot;abc&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="1-2-当成员变量值无需改变时，尽量定义为静态常量"><a href="#1-2-当成员变量值无需改变时，尽量定义为静态常量" class="headerlink" title="1.2.当成员变量值无需改变时，尽量定义为静态常量"></a>1.2.当成员变量值无需改变时，尽量定义为静态常量</h4><p>在类的每个对象实例中，每个成员变量都有一份副本，而成员静态常量只有一份实例。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpConnection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> timeout = <span class="number">5L</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpConnection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> TIMEOUT = <span class="number">5L</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-尽量使用基本数据类型，避免自动装箱和拆箱"><a href="#1-3-尽量使用基本数据类型，避免自动装箱和拆箱" class="headerlink" title="1.3.尽量使用基本数据类型，避免自动装箱和拆箱"></a>1.3.尽量使用基本数据类型，避免自动装箱和拆箱</h4><p>Java 中的基本数据类型double、float、long、int、short、char、boolean，分别对应包装类Double、Float、Long、Integer、Short、Character、Boolean。JVM支持基本类型与对应包装类的自动转换，被称为自动装箱和拆箱。装箱和拆箱都是需要CPU和内存资源的，所以应尽量避免使用自动装箱和拆箱。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] values = ...;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> value : values) &#123;</span><br><span class="line"></span><br><span class="line">sum += value; <span class="comment">// 相当于result = Integer.valueOf(result.intValue() + value);</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] values = ...;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> value : values) &#123;</span><br><span class="line"></span><br><span class="line">sum += value;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-如果变量的初值会被覆盖，就没有必要给变量赋初值"><a href="#1-4-如果变量的初值会被覆盖，就没有必要给变量赋初值" class="headerlink" title="1.4.如果变量的初值会被覆盖，就没有必要给变量赋初值"></a>1.4.如果变量的初值会被覆盖，就没有必要给变量赋初值</h4><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isAll) &#123;</span><br><span class="line"></span><br><span class="line">userList = userDAO.queryAll();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">userList = userDAO.queryActive();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isAll) &#123;</span><br><span class="line"></span><br><span class="line">userList = userDAO.queryAll();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">userList = userDAO.queryActive();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-5-尽量使用函数内的基本类型临时变量"><a href="#1-5-尽量使用函数内的基本类型临时变量" class="headerlink" title="1.5.尽量使用函数内的基本类型临时变量"></a>1.5.尽量使用函数内的基本类型临时变量</h4><p>在函数内，基本类型的参数和临时变量都保存在栈（Stack）中，访问速度较快；对象类型的参数和临时变量的引用都保存在栈（Stack）中，内容都保存在堆（Heap）中，访问速度较慢。在类中，任何类型的成员变量都保存在堆（Heap）中，访问速度较慢。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Accumulator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> result = <span class="number">0.0D</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAll</span><span class="params">(<span class="meta">@NonNull</span> <span class="keyword">double</span>[] values)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">double</span> value : values) &#123;</span><br><span class="line"></span><br><span class="line">result += value;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Accumulator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> result = <span class="number">0.0D</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAll</span><span class="params">(<span class="meta">@NonNull</span> <span class="keyword">double</span>[] values)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> sum = <span class="number">0.0D</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">double</span> value : values) &#123;</span><br><span class="line"></span><br><span class="line">sum += value;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result += sum;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-6-尽量不要在循环体外定义变量"><a href="#1-6-尽量不要在循环体外定义变量" class="headerlink" title="1.6.尽量不要在循环体外定义变量"></a>1.6.尽量不要在循环体外定义变量</h4><p>在老版JDK中，建议“尽量不要在循环体内定义变量”，但是在新版的JDK中已经做了优化。通过对编译后的字节码分析，变量定义在循环体外和循环体内没有本质的区别，运行效率基本上是一样的。</p><p>反而，根据“ 局部变量作用域最小化 ”原则，变量定义在循环体内更科学更便于维护，避免了延长大对象生命周期导致延缓回收问题 。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UserVO userVO;</span><br><span class="line"></span><br><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line"></span><br><span class="line">List&lt;UserVO&gt; userVOList = <span class="keyword">new</span> ArrayList&lt;&gt;(userDOList.size());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line"></span><br><span class="line">userVO = <span class="keyword">new</span> UserVO();</span><br><span class="line"></span><br><span class="line">userVO.setId(userDO.getId());</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">userVOList.add(userVO);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line"></span><br><span class="line">List&lt;UserVO&gt; userVOList = <span class="keyword">new</span> ArrayList&lt;&gt;(userDOList.size());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line"></span><br><span class="line">UserVO userVO = <span class="keyword">new</span> UserVO();</span><br><span class="line"></span><br><span class="line">userVO.setId(userDO.getId());</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">userVOList.add(userVO);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-7-不可变的静态常量，尽量使用非线程安全类"><a href="#1-7-不可变的静态常量，尽量使用非线程安全类" class="headerlink" title="1.7.不可变的静态常量，尽量使用非线程安全类"></a>1.7.不可变的静态常量，尽量使用非线程安全类</h4><p>不可变的静态常量，虽然需要支持多线程访问，也可以使用非线程安全类。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Class&gt; CLASS_MAP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">Map&lt;String, Class&gt; classMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">classMap.put(<span class="string">&quot;VARCHAR&quot;</span>, java.lang.String.class);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">CLASS_MAP = Collections.unmodifiableMap(classMap);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Class&gt; CLASS_MAP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">Map&lt;String, Class&gt; classMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">classMap.put(<span class="string">&quot;VARCHAR&quot;</span>, java.lang.String.class);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">CLASS_MAP = Collections.unmodifiableMap(classMap);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-8-不可变的成员变量，尽量使用非线程安全类"><a href="#1-8-不可变的成员变量，尽量使用非线程安全类" class="headerlink" title="1.8.不可变的成员变量，尽量使用非线程安全类"></a>1.8.不可变的成员变量，尽量使用非线程安全类</h4><p>不可变的成员变量，虽然需要支持多线程访问，也可以使用非线程安全类。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyFactory</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;Strategy&gt; strategyList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Strategy&gt; strategyMap;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (CollectionUtils.isNotEmpty(strategyList)) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> size = (<span class="keyword">int</span>) Math.ceil(strategyList.size() * <span class="number">4.0</span> / <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">Map&lt;String, Strategy&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(size);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Strategy strategy : strategyList) &#123;</span><br><span class="line"></span><br><span class="line">map.put(strategy.getType(), strategy);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">strategyMap = Collections.unmodifiableMap(map);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyFactory</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;Strategy&gt; strategyList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Strategy&gt; strategyMap;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (CollectionUtils.isNotEmpty(strategyList)) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> size = (<span class="keyword">int</span>) Math.ceil(strategyList.size() * <span class="number">4.0</span> / <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">Map&lt;String, Strategy&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(size);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Strategy strategy : strategyList) &#123;</span><br><span class="line"></span><br><span class="line">map.put(strategy.getType(), strategy);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">strategyMap = Collections.unmodifiableMap(map);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="2-对象-amp-类"><a href="#2-对象-amp-类" class="headerlink" title="2.对象&amp;类"></a>2.对象&amp;类</h3><h4 id="2-1-禁止使用JSON转化对象"><a href="#2-1-禁止使用JSON转化对象" class="headerlink" title="2.1.禁止使用JSON转化对象"></a>2.1.禁止使用JSON转化对象</h4><p>JSON提供把对象转化为JSON字符串、把JSON字符串转为对象的功能，于是被某些人用来转化对象。这种对象转化方式，虽然在功能上没有问题，但是在性能上却存在问题。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line"></span><br><span class="line">List&lt;UserVO&gt; userVOList = JSON.parseArray(JSON.toJSONString(userDOList), UserVO.class);</span><br><span class="line"></span><br><span class="line">正例：</span><br><span class="line"></span><br><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line"></span><br><span class="line">List&lt;UserVO&gt; userVOList = <span class="keyword">new</span> ArrayList&lt;&gt;(userDOList.size());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line"></span><br><span class="line">UserVO userVO = <span class="keyword">new</span> UserVO();</span><br><span class="line"></span><br><span class="line">userVO.setId(userDO.getId());</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">userVOList.add(userVO);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-尽量不使用反射赋值对象"><a href="#2-2-尽量不使用反射赋值对象" class="headerlink" title="2.2.尽量不使用反射赋值对象"></a>2.2.尽量不使用反射赋值对象</h4><p>用反射赋值对象，主要优点是节省了代码量，主要缺点却是性能有所下降。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line"></span><br><span class="line">List&lt;UserVO&gt; userVOList = <span class="keyword">new</span> ArrayList&lt;&gt;(userDOList.size());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line"></span><br><span class="line">UserVO userVO = <span class="keyword">new</span> UserVO();</span><br><span class="line"></span><br><span class="line">BeanUtils.copyProperties(userDO, userVO);</span><br><span class="line"></span><br><span class="line">userVOList.add(userVO);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line"></span><br><span class="line">List&lt;UserVO&gt; userVOList = <span class="keyword">new</span> ArrayList&lt;&gt;(userDOList.size());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line"></span><br><span class="line">UserVO userVO = <span class="keyword">new</span> UserVO();</span><br><span class="line"></span><br><span class="line">userVO.setId(userDO.getId());</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">userVOList.add(userVO);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-采用Lambda表达式替换内部匿名类"><a href="#2-3-采用Lambda表达式替换内部匿名类" class="headerlink" title="2.3.采用Lambda表达式替换内部匿名类"></a>2.3.采用Lambda表达式替换内部匿名类</h4><p>对于大多数刚接触JDK8的同学来说，都会认为Lambda表达式就是匿名内部类的语法糖。实际上， Lambda表达式在大多数虚拟机中采用invokeDynamic指令实现，相对于匿名内部类在效率上会更高一些。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userList = ...;</span><br><span class="line"></span><br><span class="line">Collections.sort(userList, <span class="keyword">new</span> Comparator&lt;User&gt;() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(User user1, User user2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Long userId1 = user1.getId();</span><br><span class="line"></span><br><span class="line">Long userId2 = user2.getId();</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> userId1.compareTo(userId2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userList = ...;</span><br><span class="line"></span><br><span class="line">Collections.sort(userList, (user1, user2) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">Long userId1 = user1.getId();</span><br><span class="line"></span><br><span class="line">Long userId2 = user2.getId();</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> userId1.compareTo(userId2);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="2-4-尽量避免定义不必要的子类"><a href="#2-4-尽量避免定义不必要的子类" class="headerlink" title="2.4.尽量避免定义不必要的子类"></a>2.4.尽量避免定义不必要的子类</h4><p>多一个类就需要多一份类加载，所以尽量避免定义不必要的子类。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Class&gt; CLASS_MAP =</span><br><span class="line"></span><br><span class="line">Collections.unmodifiableMap(<span class="keyword">new</span> HashMap&lt;String, Class&gt;(<span class="number">16</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">put(<span class="string">&quot;VARCHAR&quot;</span>, java.lang.String.class);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Class&gt; CLASS_MAP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">Map&lt;String, Class&gt; classMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">classMap.put(<span class="string">&quot;VARCHAR&quot;</span>, java.lang.String.class);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">CLASS_MAP = Collections.unmodifiableMap(classMap);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-尽量指定类的final修饰符"><a href="#2-5-尽量指定类的final修饰符" class="headerlink" title="2.5.尽量指定类的final修饰符"></a>2.5.尽量指定类的final修饰符</h4><p>为类指定final修饰符，可以让该类不可以被继承。如果指定了一个类为final，则该类所有的方法都是final的，Java编译器会寻找机会内联所有的final方法。内联对于提升Java运行效率作用重大，具体可参见Java运行期优化，能够使性能平均提高50%。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DateHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：使用Spring的AOP特性时，需要对Bean进行动态代理，如果Bean类添加了final修饰，会导致异常。</p><h3 id="3-方法"><a href="#3-方法" class="headerlink" title="3.方法"></a>3.方法</h3><h4 id="3-1-把跟类成员变量无关的方法声明成静态方法"><a href="#3-1-把跟类成员变量无关的方法声明成静态方法" class="headerlink" title="3.1.把跟类成员变量无关的方法声明成静态方法"></a>3.1.把跟类成员变量无关的方法声明成静态方法</h4><p>静态方法的好处就是不用生成类的实例就可以直接调用。静态方法不再属于某个对象，而是属于它所在的类。只需要通过其类名就可以访问，不需要再消耗资源去反复创建对象。即便在类内部的私有方法，如果没有使用到类成员变量，也应该声明为静态方法。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMonth</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Calendar calendar = Calendar.getInstance();</span><br><span class="line"></span><br><span class="line">calendar.setTime(date);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> calendar.get(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMonth</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Calendar calendar = Calendar.getInstance();</span><br><span class="line"></span><br><span class="line">calendar.setTime(date);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> calendar.get(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-尽量使用基本数据类型作为方法参数类型，避免不必要的装箱、拆箱和空指针判断"><a href="#3-2-尽量使用基本数据类型作为方法参数类型，避免不必要的装箱、拆箱和空指针判断" class="headerlink" title="3.2.尽量使用基本数据类型作为方法参数类型，避免不必要的装箱、拆箱和空指针判断"></a>3.2.尽量使用基本数据类型作为方法参数类型，避免不必要的装箱、拆箱和空指针判断</h4><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sum</span><span class="params">(Double value1, Double value2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> double1 = Objects.isNull(value1) ? <span class="number">0.0D</span> : value1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> double2 = Objects.isNull(value2) ? <span class="number">0.0D</span> : value2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> double1 + double2;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> result = sum(<span class="number">1.0D</span>, <span class="number">2.0D</span>);</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sum</span><span class="params">(<span class="keyword">double</span> value1, <span class="keyword">double</span> value2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> value1 + value2;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> result = sum(<span class="number">1.0D</span>, <span class="number">2.0D</span>);</span><br></pre></td></tr></table></figure><h4 id="3-3-尽量使用基本数据类型作为方法返回值类型，避免不必要的装箱、拆箱和空指针判断"><a href="#3-3-尽量使用基本数据类型作为方法返回值类型，避免不必要的装箱、拆箱和空指针判断" class="headerlink" title="3.3.尽量使用基本数据类型作为方法返回值类型，避免不必要的装箱、拆箱和空指针判断"></a>3.3.尽量使用基本数据类型作为方法返回值类型，避免不必要的装箱、拆箱和空指针判断</h4><p>在JDK类库的方法中，很多方法返回值都采用了基本数据类型，首先是为了避免不必要的装箱和拆箱，其次是为了避免返回值的空指针判断。比如：Collection.isEmpty()和Map.size()。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">isValid</span><span class="params">(UserDO user)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Objects.isNull(user)) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Boolean.TRUE.equals(user.getIsValid());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用代码</span></span><br><span class="line"></span><br><span class="line">UserDO user = ...;</span><br><span class="line"></span><br><span class="line">Boolean isValid = isValid(user);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Objects.nonNull(isValid) &amp;&amp; isValid.booleanValue()) &#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(UserDO user)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Objects.isNull(user)) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Boolean.TRUE.equals(user.getIsValid());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用代码</span></span><br><span class="line"></span><br><span class="line">UserDO user = ...;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isValid(user)) &#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-协议方法参数值非空，避免不必要的空指针判断"><a href="#3-4-协议方法参数值非空，避免不必要的空指针判断" class="headerlink" title="3.4.协议方法参数值非空，避免不必要的空指针判断"></a>3.4.协议方法参数值非空，避免不必要的空指针判断</h4><p>协议编程，可以@NonNull和@Nullable标注参数，是否遵循全凭调用者自觉。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(UserDO user)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Objects.isNull(user)) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Boolean.TRUE.equals(user.getIsValid());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(<span class="meta">@NonNull</span> UserDO user)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Boolean.TRUE.equals(user.getIsValid());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-协议方法返回值非空，避免不必要的空指针判断"><a href="#3-5-协议方法返回值非空，避免不必要的空指针判断" class="headerlink" title="3.5.协议方法返回值非空，避免不必要的空指针判断"></a>3.5.协议方法返回值非空，避免不必要的空指针判断</h4><p>协议编程，可以@NonNull和@Nullable标注参数，是否遵循全凭实现者自觉。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;OrderVO&gt; <span class="title">queryUserOrder</span><span class="params">(Long userId)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用代码</span></span><br><span class="line"></span><br><span class="line">List&lt;OrderVO&gt; orderList = orderService.queryUserOrder(userId);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (CollectionUtils.isNotEmpty(orderList)) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (OrderVO order : orderList) &#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;OrderVO&gt; <span class="title">queryUserOrder</span><span class="params">(Long userId)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用代码</span></span><br><span class="line"></span><br><span class="line">List&lt;OrderVO&gt; orderList = orderService.queryUserOrder(userId);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (OrderVO order : orderList) &#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-6-被调用方法已支持判空处理，调用方法无需再进行判空处理"><a href="#3-6-被调用方法已支持判空处理，调用方法无需再进行判空处理" class="headerlink" title="3.6.被调用方法已支持判空处理，调用方法无需再进行判空处理"></a>3.6.被调用方法已支持判空处理，调用方法无需再进行判空处理</h4><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UserDO user = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(value)) &#123;</span><br><span class="line"></span><br><span class="line">user = JSON.parseObject(value, UserDO.class);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UserDO user = JSON.parseObject(value, UserDO.class);</span><br></pre></td></tr></table></figure><h4 id="3-7-尽量避免不必要的函数封装"><a href="#3-7-尽量避免不必要的函数封装" class="headerlink" title="3.7.尽量避免不必要的函数封装"></a>3.7.尽量避免不必要的函数封装</h4><p>方法调用会引起入栈和出栈，导致消耗更多的CPU和内存，应当尽量避免不必要的函数封装。当然，为了使代码更简洁、更清晰、更易维护，增加一定的方法调用所带来的性能损耗是值得的。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数封装</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isVip</span><span class="params">(Boolean isVip)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Boolean.TRUE.equals(isVip);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> isVip = isVip(user.getVip());</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> isVip = Boolean.TRUE.equals(user.getVip());</span><br></pre></td></tr></table></figure><h4 id="3-8-尽量指定方法的final修饰符"><a href="#3-8-尽量指定方法的final修饰符" class="headerlink" title="3.8.尽量指定方法的final修饰符"></a>3.8.尽量指定方法的final修饰符</h4><p>方法指定final修饰符，可以让方法不可以被重写，Java编译器会寻找机会内联所有的final方法。内联对于提升Java运行效率作用重大，具体可参见Java运行期优化，能够使性能平均提高50%。</p><p>注意：所有的private方法会隐式地被指定final修饰符，所以无须再为其指定final修饰符。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：使用Spring的AOP特性时，需要对Bean进行动态代理，如果方法添加了final修饰，将不会被代理。</p><h3 id="4-表达式"><a href="#4-表达式" class="headerlink" title="4.表达式"></a>4.表达式</h3><h4 id="4-1-尽量减少方法的重复调用"><a href="#4-1-尽量减少方法的重复调用" class="headerlink" title="4.1.尽量减少方法的重复调用"></a>4.1.尽量减少方法的重复调用</h4><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList = ...;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; userList.size(); i++) &#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList = ...;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> userLength = userList.size();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; userLength; i++) &#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-尽量避免不必要的方法调用"><a href="#4-2-尽量避免不必要的方法调用" class="headerlink" title="4.2.尽量避免不必要的方法调用"></a>4.2.尽量避免不必要的方法调用</h4><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList = userDAO.queryActive();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isAll) &#123;</span><br><span class="line"></span><br><span class="line">userList = userDAO.queryAll();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isAll) &#123;</span><br><span class="line"></span><br><span class="line">userList = userDAO.queryAll();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">userList = userDAO.queryActive();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-尽量使用移位来代替正整数乘除"><a href="#4-3-尽量使用移位来代替正整数乘除" class="headerlink" title="4.3.尽量使用移位来代替正整数乘除"></a>4.3.尽量使用移位来代替正整数乘除</h4><p>用移位操作可以极大地提高性能。对于乘除2^n(n为正整数)的正整数计算，可以用移位操作来代替。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num1 = a * <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num2 = a / <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num1 = a &lt;&lt; <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num2 = a &gt;&gt; <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h4 id="4-4-提取公共表达式，避免重复计算"><a href="#4-4-提取公共表达式，避免重复计算" class="headerlink" title="4.4.提取公共表达式，避免重复计算"></a>4.4.提取公共表达式，避免重复计算</h4><p>提取公共表达式，只计算一次值，然后重复利用值。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> dx = x2 - x1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> dy = y2 - y1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> distance = Math.sqrt(dx * dx + dy * dy);</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> distance = Math.sqrt(Math.pow(x2 - x1, <span class="number">2</span>) + Math.pow(y2 - y1, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><h4 id="4-5-尽量不在条件表达式中用-取反"><a href="#4-5-尽量不在条件表达式中用-取反" class="headerlink" title="4.5.尽量不在条件表达式中用!取反"></a>4.5.尽量不在条件表达式中用!取反</h4><p>使用!取反会多一次计算，如果没有必要则优化掉。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(a &gt;= <span class="number">10</span>)) &#123;</span><br><span class="line"></span><br><span class="line">... <span class="comment">// 条件处理1</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">... <span class="comment">// 条件处理2</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (a &lt; <span class="number">10</span>) &#123;</span><br><span class="line"></span><br><span class="line">... <span class="comment">// 条件处理1</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">... <span class="comment">// 条件处理2</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-6-对于多常量选择分支，尽量使用switch语句而不是if-else语句"><a href="#4-6-对于多常量选择分支，尽量使用switch语句而不是if-else语句" class="headerlink" title="4.6.对于多常量选择分支，尽量使用switch语句而不是if-else语句"></a>4.6.对于多常量选择分支，尽量使用switch语句而不是if-else语句</h4><p>if-else语句，每个if条件语句都要加装计算，直到if条件语句为true为止。switch语句进行了跳转优化，Java中采用tableswitch或lookupswitch指令实现，对于多常量选择分支处理效率更高。经过试验证明：在每个分支出现概率相同的情况下，低于5个分支时if-else语句效率更高，高于5个分支时switch语句效率更高。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">...; <span class="comment">// 分支1</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line">...; <span class="comment">// 分支2</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == ...) &#123;</span><br><span class="line"></span><br><span class="line">...; <span class="comment">// 分支n</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">...; <span class="comment">// 分支n+1</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (i) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span> :</span><br><span class="line"></span><br><span class="line">... <span class="comment">// 分支1break;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span> :</span><br><span class="line"></span><br><span class="line">... <span class="comment">// 分支2break;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> ... :</span><br><span class="line"></span><br><span class="line">... <span class="comment">// 分支nbreak;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span> :</span><br><span class="line"></span><br><span class="line">... <span class="comment">// 分支n+1break;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>备注：如果业务复杂，可以采用Map实现策略模式。</p><h3 id="5-字符串"><a href="#5-字符串" class="headerlink" title="5.字符串"></a>5.字符串</h3><h4 id="5-1-尽量不要使用正则表达式匹配"><a href="#5-1-尽量不要使用正则表达式匹配" class="headerlink" title="5.1.尽量不要使用正则表达式匹配"></a>5.1.尽量不要使用正则表达式匹配</h4><p>正则表达式匹配效率较低，尽量使用字符串匹配操作。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String source = <span class="string">&quot;a::1,b::2,c::3,d::4&quot;</span>;</span><br><span class="line"></span><br><span class="line">String target = source.replaceAll(<span class="string">&quot;::&quot;</span>, <span class="string">&quot;=&quot;</span>);</span><br><span class="line"></span><br><span class="line">Stringp[] targets = source.spit(<span class="string">&quot;::&quot;</span>);</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String source = <span class="string">&quot;a::1,b::2,c::3,d::4&quot;</span>;</span><br><span class="line"></span><br><span class="line">String target = source.replace(<span class="string">&quot;::&quot;</span>, <span class="string">&quot;=&quot;</span>);</span><br><span class="line"></span><br><span class="line">Stringp[] targets = StringUtils.split(source, <span class="string">&quot;::&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="5-2-尽量使用字符替换字符串"><a href="#5-2-尽量使用字符替换字符串" class="headerlink" title="5.2.尽量使用字符替换字符串"></a>5.2.尽量使用字符替换字符串</h4><p>字符串的长度不确定，而字符的长度固定为1，查找和匹配的效率自然提高了。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String source = <span class="string">&quot;a:1,b:2,c:3,d:4&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = source.indexOf(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"></span><br><span class="line">String target = source.replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;=&quot;</span>);</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String source = <span class="string">&quot;a:1,b:2,c:3,d:4&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = source.indexOf(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line"></span><br><span class="line">String target = source.replace(<span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;=&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="5-3-尽量使用StringBuilder进行字符串拼接"><a href="#5-3-尽量使用StringBuilder进行字符串拼接" class="headerlink" title="5.3.尽量使用StringBuilder进行字符串拼接"></a>5.3.尽量使用StringBuilder进行字符串拼接</h4><p>String是final类，内容不可修改，所以每次字符串拼接都会生成一个新对象。StringBuilder在初始化时申请了一块内存，以后的字符串拼接都在这块内存中执行，不会申请新内存和生成新对象。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">s += <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s += i;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">sb.append(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sb.append(i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-4-不要使用””-转化字符串"><a href="#5-4-不要使用””-转化字符串" class="headerlink" title="5.4.不要使用””+转化字符串"></a>5.4.不要使用””+转化字符串</h4><p>使用””+进行字符串转化，使用方便但是效率低，建议使用String.valueOf.</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">12345</span>;</span><br><span class="line"></span><br><span class="line">String s = <span class="string">&quot;&quot;</span> + i;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">12345</span>;</span><br><span class="line"></span><br><span class="line">String s = String.valueOf(i);</span><br></pre></td></tr></table></figure><h3 id="6-数组"><a href="#6-数组" class="headerlink" title="6.数组"></a>6.数组</h3><h4 id="6-1-不要使用循环拷贝数组，尽量使用System-arraycopy拷贝数组"><a href="#6-1-不要使用循环拷贝数组，尽量使用System-arraycopy拷贝数组" class="headerlink" title="6.1.不要使用循环拷贝数组，尽量使用System.arraycopy拷贝数组"></a>6.1.不要使用循环拷贝数组，尽量使用System.arraycopy拷贝数组</h4><p>推荐使用System.arraycopy拷贝数组，也可以使用Arrays.copyOf拷贝数组。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] sources = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] targets = <span class="keyword">new</span> <span class="keyword">int</span>[sources.length];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; targets.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">targets[i] = sources[i];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] sources = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] targets = <span class="keyword">new</span> <span class="keyword">int</span>[sources.length];</span><br><span class="line"></span><br><span class="line">System.arraycopy(sources, <span class="number">0</span>, targets, <span class="number">0</span>, targets.length);</span><br></pre></td></tr></table></figure><h4 id="6-2-集合转化为类型T数组时，尽量传入空数组T-0"><a href="#6-2-集合转化为类型T数组时，尽量传入空数组T-0" class="headerlink" title="6.2.集合转化为类型T数组时，尽量传入空数组T[0]"></a>6.2.集合转化为类型T数组时，尽量传入空数组T[0]</h4><p>将集合转换为数组有2种形式：toArray(new T[n])和toArray(new T[0])。在旧的Java版本中，建议使用toArray(new T[n])，因为创建数组时所需的反射调用非常慢。在OpenJDK6后，反射调用是内在的，使得性能得以提高，toArray(new T[0])比toArray(new T[n])效率更高。此外，toArray(new T[n])比toArray(new T[0])多获取一次列表大小，如果计算列表大小耗时过长，也会导致toArray(new T[n])效率降低。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, ...);</span><br><span class="line"></span><br><span class="line">Integer[] integers = integerList.toArray(<span class="keyword">new</span> Integer[integerList.size()]);</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; integerList = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, ...);</span><br><span class="line"></span><br><span class="line">Integer[] integers = integerList.toArray(<span class="keyword">new</span> Integer[<span class="number">0</span>]); <span class="comment">// 勿用new Integer[]&#123;&#125;</span></span><br></pre></td></tr></table></figure><p>建议：集合应该提供一个toArray(Class clazz)方法，避免无用的空数组初始化（new T[0]）。</p><h4 id="6-3-集合转化为Object数组时，尽量使用toArray-方法"><a href="#6-3-集合转化为Object数组时，尽量使用toArray-方法" class="headerlink" title="6.3.集合转化为Object数组时，尽量使用toArray()方法"></a>6.3.集合转化为Object数组时，尽量使用toArray()方法</h4><p>转化Object数组时，没有必要使用toArray[new Object[0]]，可以直接使用toArray()。避免了类型的判断，也避免了空数组的申请，所以效率会更高。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Object&gt; objectList = Arrays.asList(<span class="number">1</span>, <span class="string">&quot;2&quot;</span>, <span class="number">3</span>, <span class="string">&quot;4&quot;</span>, <span class="number">5</span>, ...);</span><br><span class="line"></span><br><span class="line">Object[] objects = objectList.toArray(<span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Object&gt; objectList = Arrays.asList(<span class="number">1</span>, <span class="string">&quot;2&quot;</span>, <span class="number">3</span>, <span class="string">&quot;4&quot;</span>, <span class="number">5</span>, ...);</span><br><span class="line"></span><br><span class="line">Object[] objects = objectList.toArray();</span><br></pre></td></tr></table></figure><h3 id="7-集合"><a href="#7-集合" class="headerlink" title="7.集合"></a>7.集合</h3><h4 id="7-1-初始化集合时，尽量指定集合大小"><a href="#7-1-初始化集合时，尽量指定集合大小" class="headerlink" title="7.1.初始化集合时，尽量指定集合大小"></a>7.1.初始化集合时，尽量指定集合大小</h4><p>Java集合初始化时都会指定一个默认大小，当默认大小不再满足数据需求时就会扩容，每次扩容的时间复杂度有可能是O(n)。所以，尽量指定预知的集合大小，就能避免或减少集合的扩容次数。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line"></span><br><span class="line">Set&lt;Long&gt; userSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">Map&lt;Long, UserDO&gt; userMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">List&lt;UserVO&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line"></span><br><span class="line">userSet.add(userDO.getId());</span><br><span class="line"></span><br><span class="line">userMap.put(userDO.getId(), userDO);</span><br><span class="line"></span><br><span class="line">userList.add(transUser(userDO));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> userSize = userDOList.size();</span><br><span class="line"></span><br><span class="line">Set&lt;Long&gt; userSet = <span class="keyword">new</span> HashSet&lt;&gt;(userSize);</span><br><span class="line"></span><br><span class="line">Map&lt;Long, UserDO&gt; userMap = <span class="keyword">new</span> HashMap&lt;&gt;((<span class="keyword">int</span>) Math.ceil(userSize * <span class="number">4.0</span> / <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">List&lt;UserVO&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;(userSize);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line"></span><br><span class="line">userSet.add(userDO.getId());</span><br><span class="line"></span><br><span class="line">userMap.put(userDO.getId(), userDO);</span><br><span class="line"></span><br><span class="line">userList.add(transUser(userDO));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-2-不要使用循环拷贝集合，尽量使用JDK提供的方法拷贝集合"><a href="#7-2-不要使用循环拷贝集合，尽量使用JDK提供的方法拷贝集合" class="headerlink" title="7.2.不要使用循环拷贝集合，尽量使用JDK提供的方法拷贝集合"></a>7.2.不要使用循环拷贝集合，尽量使用JDK提供的方法拷贝集合</h4><p>JDK提供的方法可以一步指定集合的容量，避免多次扩容浪费时间和空间。同时，这些方法的底层也是调用System.arraycopy方法实现，进行数据的批量拷贝效率更高。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;UserDO&gt; user1List = ...;</span><br><span class="line"></span><br><span class="line">List&lt;UserDO&gt; user2List = ...;</span><br><span class="line"></span><br><span class="line">List&lt;UserDO&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;(user1List.size() + user2List.size());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (UserDO user1 : user1List) &#123;</span><br><span class="line"></span><br><span class="line">userList.add(user1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (UserDO user2 : user2List) &#123;</span><br><span class="line"></span><br><span class="line">userList.add(user2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;UserDO&gt; user1List = ...;</span><br><span class="line"></span><br><span class="line">List&lt;UserDO&gt; user2List = ...;</span><br><span class="line"></span><br><span class="line">List&lt;UserDO&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;(user1List.size() + user2List.size());</span><br><span class="line"></span><br><span class="line">userList.addAll(user1List);</span><br><span class="line"></span><br><span class="line">userList.addAll(user2List);</span><br></pre></td></tr></table></figure><h4 id="7-3-尽量使用Arrays-asList转化数组为列表"><a href="#7-3-尽量使用Arrays-asList转化数组为列表" class="headerlink" title="7.3.尽量使用Arrays.asList转化数组为列表"></a>7.3.尽量使用Arrays.asList转化数组为列表</h4><p>原理与”不要使用循环拷贝集合，尽量使用JDK提供的方法拷贝集合”类似。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; typeList = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">typeList.add(<span class="string">&quot;Short&quot;</span>);</span><br><span class="line"></span><br><span class="line">typeList.add(<span class="string">&quot;Integer&quot;</span>);</span><br><span class="line"></span><br><span class="line">typeList.add(<span class="string">&quot;Long&quot;</span>);</span><br><span class="line"></span><br><span class="line">String[] names = ...;</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; nameList = ...;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line"></span><br><span class="line">nameList.add(name);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; typeList = Arrays.asList(<span class="string">&quot;Short&quot;</span>, <span class="string">&quot;Integer&quot;</span>, <span class="string">&quot;Long&quot;</span>);</span><br><span class="line"></span><br><span class="line">String[] names = ...;</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; nameList = ...;</span><br><span class="line"></span><br><span class="line">nameList.addAll(Arrays.asList(names));</span><br></pre></td></tr></table></figure><h4 id="7-4-直接迭代需要使用的集合"><a href="#7-4-直接迭代需要使用的集合" class="headerlink" title="7.4.直接迭代需要使用的集合"></a>7.4.直接迭代需要使用的集合</h4><p>直接迭代需要使用的集合，无需通过其它操作获取数据。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Long, UserDO&gt; userMap = ...;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Long userId : userMap.keySet()) &#123;</span><br><span class="line"></span><br><span class="line">UserDO user = userMap.get(userId);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Long, UserDO&gt; userMap = ...;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Long, UserDO&gt; userEntry : userMap.entrySet()) &#123;</span><br><span class="line"></span><br><span class="line">Long userId = userEntry.getKey();</span><br><span class="line"></span><br><span class="line">UserDO user = userEntry.getValue();</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-5-不要使用size方法检测空，必须使用isEmpty方法检测空"><a href="#7-5-不要使用size方法检测空，必须使用isEmpty方法检测空" class="headerlink" title="7.5.不要使用size方法检测空，必须使用isEmpty方法检测空"></a>7.5.不要使用size方法检测空，必须使用isEmpty方法检测空</h4><p>使用size方法来检测空逻辑上没有问题，但使用isEmpty方法使得代码更易读，并且可以获得更好的性能。任何isEmpty方法实现的时间复杂度都是O(1)，但是某些size方法实现的时间复杂度有可能是O(n)。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList = ...;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (userList.size() == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Map&lt;Long, UserDO&gt; userMap = ...;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (userMap.size() == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList = ...;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (userList.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Map&lt;Long, UserDO&gt; userMap = ...;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (userMap.isEmpty()) &#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-6-非随机访问的List，尽量使用迭代代替随机访问"><a href="#7-6-非随机访问的List，尽量使用迭代代替随机访问" class="headerlink" title="7.6.非随机访问的List，尽量使用迭代代替随机访问"></a>7.6.非随机访问的List，尽量使用迭代代替随机访问</h4><p>对于列表，可分为随机访问和非随机访问两类，可以用是否实现RandomAccess接口判断。随机访问列表，直接通过get获取数据不影响效率。而非随机访问列表，通过get获取数据效率极低。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinkedList&lt;UserDO&gt; userDOList = ...;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> size = userDOList.size();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line"></span><br><span class="line">UserDO userDO = userDOList.get(i);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinkedList&lt;UserDO&gt; userDOList = ...;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实，不管列表支不支持随机访问，都应该使用迭代进行遍历。</p><h4 id="7-7-尽量使用HashSet判断值存在"><a href="#7-7-尽量使用HashSet判断值存在" class="headerlink" title="7.7.尽量使用HashSet判断值存在"></a>7.7.尽量使用HashSet判断值存在</h4><p>在Java集合类库中，List的contains方法普遍时间复杂度是O(n)，而HashSet的时间复杂度为O(1)。如果需要频繁调用contains方法查找数据，可以先将List转换成HashSet。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Long&gt; adminIdList = ...;</span><br><span class="line"></span><br><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line"></span><br><span class="line">List&lt;UserVO&gt; userVOList = <span class="keyword">new</span> ArrayList&lt;&gt;(userDOList.size());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (adminIdList.contains(userDO.getId())) &#123;</span><br><span class="line"></span><br><span class="line">userVOList.add(transUser(userDO));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;Long&gt; adminIdSet = ...;</span><br><span class="line"></span><br><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line"></span><br><span class="line">List&lt;UserVO&gt; userVOList = <span class="keyword">new</span> ArrayList&lt;&gt;(userDOList.size());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (adminIdSet.contains(userDO.getId())) &#123;</span><br><span class="line"></span><br><span class="line">userVOList.add(transUser(userDO));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-8-避免先判断存在再进行获取"><a href="#7-8-避免先判断存在再进行获取" class="headerlink" title="7.8.避免先判断存在再进行获取"></a>7.8.避免先判断存在再进行获取</h4><p>如果需要先判断存在再进行获取，可以直接获取并判断空，从而避免了二次查找操作。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserVO <span class="title">transUser</span><span class="params">(UserDO user, Map&lt;Long, RoleDO&gt; roleMap)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">UserVO userVO = <span class="keyword">new</span> UserVO();</span><br><span class="line"></span><br><span class="line">userVO.setId(user.getId());</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (roleMap.contains(user.getRoleId())) &#123;</span><br><span class="line"></span><br><span class="line">RoleDO role = roleMap.get(user.getRoleId());</span><br><span class="line"></span><br><span class="line">userVO.setRole(transRole(role));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserVO <span class="title">transUser</span><span class="params">(UserDO user, Map&lt;Long, RoleDO&gt; roleMap)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">UserVO userVO = <span class="keyword">new</span> UserVO();</span><br><span class="line"></span><br><span class="line">userVO.setId(user.getId());</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">RoleDO role = roleMap.get(user.getRoleId());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Objects.nonNull(role)) &#123;</span><br><span class="line"></span><br><span class="line">userVO.setRole(transRole(role));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-异常"><a href="#8-异常" class="headerlink" title="8.异常"></a>8.异常</h3><h4 id="8-1-直接捕获对应的异常"><a href="#8-1-直接捕获对应的异常" class="headerlink" title="8.1.直接捕获对应的异常"></a>8.1.直接捕获对应的异常</h4><p>直接捕获对应的异常，避免用instanceof判断，效率更高代码更简洁。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">saveData();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (e <span class="keyword">instanceof</span> IOException) &#123;</span><br><span class="line"></span><br><span class="line">log.error(<span class="string">&quot;保存数据IO异常&quot;</span>, e);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">log.error(<span class="string">&quot;保存数据其它异常&quot;</span>, e);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">saveData();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">log.error(<span class="string">&quot;保存数据IO异常&quot;</span>, e);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">log.error(<span class="string">&quot;保存数据其它异常&quot;</span>, e);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-2-尽量避免在循环中捕获异常"><a href="#8-2-尽量避免在循环中捕获异常" class="headerlink" title="8.2.尽量避免在循环中捕获异常"></a>8.2.尽量避免在循环中捕获异常</h4><p>当循环体抛出异常后，无需循环继续执行时，没有必要在循环体中捕获异常。因为，过多的捕获异常会降低程序执行效率。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Double <span class="title">sum</span><span class="params">(List&lt;String&gt; valueList)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> sum = <span class="number">0.0D</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String value : valueList) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">sum += Double.parseDouble(value);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Double <span class="title">sum</span><span class="params">(List&lt;String&gt; valueList)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> sum = <span class="number">0.0D</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String value : valueList) &#123;</span><br><span class="line"></span><br><span class="line">sum += Double.parseDouble(value);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8-3-禁止使用异常控制业务流程"><a href="#8-3-禁止使用异常控制业务流程" class="headerlink" title="8.3.禁止使用异常控制业务流程"></a>8.3.禁止使用异常控制业务流程</h4><p>相对于条件表达式，异常的处理效率更低。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(UserDO user)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Boolean.TRUE.equals(user.getIsValid());</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span>(NullPointerException e) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(UserDO user)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Objects.isNull(user)) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Boolean.TRUE.equals(user.getIsValid());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-缓冲区"><a href="#9-缓冲区" class="headerlink" title="9.缓冲区"></a>9.缓冲区</h3><h4 id="9-1-初始化时尽量指定缓冲区大小"><a href="#9-1-初始化时尽量指定缓冲区大小" class="headerlink" title="9.1.初始化时尽量指定缓冲区大小"></a>9.1.初始化时尽量指定缓冲区大小</h4><p>初始化时，指定缓冲区的预期容量大小，避免多次扩容浪费时间和空间。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuffer buffer = <span class="keyword">new</span> StringBuffer(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="number">1024</span>);</span><br></pre></td></tr></table></figure><h4 id="9-2-尽量重复使用同一缓冲区"><a href="#9-2-尽量重复使用同一缓冲区" class="headerlink" title="9.2.尽量重复使用同一缓冲区"></a>9.2.尽量重复使用同一缓冲区</h4><p>针对缓冲区，Java虚拟机需要花时间生成对象，还要花时间进行垃圾回收处理。所以，尽量重复利用缓冲区。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuilder builder1 = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">builder1.append(<span class="string">&quot;update t_user set name = &#x27;&quot;</span>).append(userName).append(<span class="string">&quot;&#x27; where id = &quot;</span>).append(userId);</span><br><span class="line"></span><br><span class="line">statement.executeUpdate(builder1.toString());</span><br><span class="line"></span><br><span class="line">StringBuilder builder2 = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">builder2.append(<span class="string">&quot;select id, name from t_user where id = &quot;</span>).append(userId);</span><br><span class="line"></span><br><span class="line">ResultSet resultSet = statement.executeQuery(builder2.toString());</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">builder.append(<span class="string">&quot;update t_user set name = &#x27;&quot;</span>).append(userName).append(<span class="string">&quot;&#x27; where id = &quot;</span>).append(userId);</span><br><span class="line"></span><br><span class="line">statement.executeUpdate(builder.toString());</span><br><span class="line"></span><br><span class="line">builder.setLength(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">builder.append(<span class="string">&quot;select id, name from t_user where id = &quot;</span>).append(userId);</span><br><span class="line"></span><br><span class="line">ResultSet resultSet = statement.executeQuery(builder.toString());</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>其中，使用setLength方法让缓冲区重新从0开始。</p><h4 id="9-3-尽量设计使用同一缓冲区"><a href="#9-3-尽量设计使用同一缓冲区" class="headerlink" title="9.3.尽量设计使用同一缓冲区"></a>9.3.尽量设计使用同一缓冲区</h4><p>为了提高程序运行效率，在设计上尽量使用同一缓冲区。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 转化XML(UserDO)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toXml</span><span class="params">(UserDO user)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">builder.append(<span class="string">&quot;&lt;UserDO&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">builder.append(toXml(user.getId()));</span><br><span class="line"></span><br><span class="line">builder.append(toXml(user.getName()));</span><br><span class="line"></span><br><span class="line">builder.append(toXml(user.getRole()));</span><br><span class="line"></span><br><span class="line">builder.append(<span class="string">&quot;&lt;/UserDO&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> builder.toString();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转化XML(Long)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toXml</span><span class="params">(Long value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">builder.append(<span class="string">&quot;&lt;Long&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">builder.append(value);</span><br><span class="line"></span><br><span class="line">builder.append(<span class="string">&quot;&lt;/Long&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> builder.toString();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用代码</span></span><br><span class="line"></span><br><span class="line">UserDO user = ...;</span><br><span class="line"></span><br><span class="line">String xml = toXml(user);</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 转化XML(UserDO)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">toXml</span><span class="params">(StringBuilder builder, UserDO user)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">builder.append(<span class="string">&quot;&lt;UserDO&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">toXml(builder, user.getId());</span><br><span class="line"></span><br><span class="line">toXml(builder, user.getName());</span><br><span class="line"></span><br><span class="line">toXml(builder, user.getRole());</span><br><span class="line"></span><br><span class="line">builder.append(<span class="string">&quot;&lt;/UserDO&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转化XML(Long)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">toXml</span><span class="params">(StringBuilder builder, Long value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">builder.append(<span class="string">&quot;&lt;Long&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">builder.append(value);</span><br><span class="line"></span><br><span class="line">builder.append(<span class="string">&quot;&lt;/Long&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用代码</span></span><br><span class="line"></span><br><span class="line">UserDO user = ...;</span><br><span class="line"></span><br><span class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">toXml(builder, user);</span><br><span class="line"></span><br><span class="line">String xml = builder.toString();</span><br></pre></td></tr></table></figure><p>去掉每个转化方法中的缓冲区申请，申请一个缓冲区给每个转化方法使用。从时间上来说，节约了大量缓冲区的申请释放时间；从空间上来说，节约了大量缓冲区的临时存储空间。</p><h4 id="9-4-尽量使用缓冲流减少IO操作"><a href="#9-4-尽量使用缓冲流减少IO操作" class="headerlink" title="9.4.尽量使用缓冲流减少IO操作"></a>9.4.尽量使用缓冲流减少IO操作</h4><p>使用缓冲流BufferedReader、BufferedWriter、BufferedInputStream、BufferedOutputStream等，可以大幅较少IO次数并提升IO速度。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (FileInputStream input = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">FileOutputStream output = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;b&quot;</span>)) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] temp = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((size = input.read(temp)) != -<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">output.write(temp, <span class="number">0</span>, size);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">log.error(<span class="string">&quot;复制文件异常&quot;</span>, e);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (BufferedInputStream input = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;a&quot;</span>));</span><br><span class="line"></span><br><span class="line">BufferedOutputStream output = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;b&quot;</span>))) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] temp = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((size = input.read(temp)) != -<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">output.write(temp, <span class="number">0</span>, size);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">log.error(<span class="string">&quot;复制文件异常&quot;</span>, e);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，可以根据实际情况手动指定缓冲流的大小，把缓冲流的缓冲作用发挥到最大。</p><h3 id="10-线程"><a href="#10-线程" class="headerlink" title="10.线程"></a>10.线程</h3><h4 id="10-1-在单线程中，尽量使用非线程安全类"><a href="#10-1-在单线程中，尽量使用非线程安全类" class="headerlink" title="10.1.在单线程中，尽量使用非线程安全类"></a>10.1.在单线程中，尽量使用非线程安全类</h4><p>使用非线程安全类，避免了不必要的同步开销。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuffer buffer = <span class="keyword">new</span> StringBuffer(<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">buffer.append(<span class="string">&quot;select * from &quot;</span>).append(T_USER).append(<span class="string">&quot; where id = ?&quot;</span>);</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuilder buffer = <span class="keyword">new</span> StringBuilder(<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">buffer.append(<span class="string">&quot;select * from &quot;</span>).append(T_USER).append(<span class="string">&quot; where id = ?&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="10-2-在多线程中，尽量使用线程安全类"><a href="#10-2-在多线程中，尽量使用线程安全类" class="headerlink" title="10.2.在多线程中，尽量使用线程安全类"></a>10.2.在多线程中，尽量使用线程安全类</h4><p>使用线程安全类，比自己实现的同步代码更简洁更高效。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line"></span><br><span class="line">counter++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger counter = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">counter.incrementAndGet();</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-3-尽量减少同步代码块范围"><a href="#10-3-尽量减少同步代码块范围" class="headerlink" title="10.3.尽量减少同步代码块范围"></a>10.3.尽量减少同步代码块范围</h4><p>在一个方法中，可能只有一小部分的逻辑是需要同步控制的，如果同步控制了整个方法会影响执行效率。所以，尽量减少同步代码块的范围，只对需要进行同步的代码进行同步。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">counter++;</span><br><span class="line"></span><br><span class="line">... <span class="comment">// 非同步操作</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line"></span><br><span class="line">counter++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">... <span class="comment">// 非同步操作</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-4-尽量合并为同一同步代码块"><a href="#10-4-尽量合并为同一同步代码块" class="headerlink" title="10.4.尽量合并为同一同步代码块"></a>10.4.尽量合并为同一同步代码块</h4><p>同步代码块是有性能开销的，如果确定可以合并为同一同步代码块，就应该尽量合并为同一同步代码块。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理单一订单</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="title">handleOrder</span><span class="params">(OrderDO order)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理所有订单</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleOrder</span><span class="params">(List&lt;OrderDO&gt; orderList)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (OrderDO order : orderList) &#123;</span><br><span class="line"></span><br><span class="line">handleOrder(order);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理单一订单</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">handleOrder</span><span class="params">(OrderDO order)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理所有订单</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">handleOrder</span><span class="params">(List&lt;OrderDO&gt; orderList)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (OrderDO order : orderList) &#123;</span><br><span class="line"></span><br><span class="line">handleOrder(order);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-5-尽量使用线程池减少线程开销"><a href="#10-5-尽量使用线程池减少线程开销" class="headerlink" title="10.5.尽量使用线程池减少线程开销"></a>10.5.尽量使用线程池减少线程开销</h4><p>多线程中两个必要的开销：线程的创建和上下文切换。采用线程池，可以尽量地避免这些开销。</p><p>反例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeTask</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(runnable).start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService EXECUTOR_SERVICE = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeTask</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">executorService.execute(runnable);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
